{"version":3,"sources":["login/login.jsx","login/register.jsx","note/home.jsx","note/summary.jsx","note/knowledge.jsx","note/Js-senior.jsx","note/Es6grammar.jsx","note/Vueframe.jsx","login/index.jsx","serviceWorker.js","index.js"],"names":["Login","setchange","target","setState","name","value","login","state","usfo","pwfo","user","alert","pass","onlogin","props","getdata","users","JSON","parse","sessionStorage","getItem","setTimeout","this","className","autoComplete","type","onChange","onClick","Component","Register","register","ispa","email","trim","length","test","onregister","obj","setItem","stringify","Header","Layout","Sider","Content","data","iconType","id","label","Home","collapsed","toggle","trigger","collapsible","theme","mode","defaultSelectedKeys","map","item","index","Item","key","onchange","style","background","padding","margin","minHeight","children","Panel","Collapse","text","grammar","method","link","relevant","Connect","describe","describes","parameter","parameter1","parameter2","performance","performance1","describes2","retuval","retuval1","data2","title","chidlren","label2","label3","label4","num","describes3","describes4","describes5","method2","retuval2","retuval3","retuval4","parameter3","abnormal","abnormal1","abnormal2","num2","label5","label6","label7","label8","obj2","defaultActiveKey","header","example","example1","example2","href","Index","window","location","hash","coust","isCom","slice","onhashchange","Dom","Es6grammar","Vueframe","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAIqBA,E,YACnB,aAAe,IAAD,uBACZ,+CASFC,UAAY,YAAiB,IAAdC,EAAa,EAAbA,OACb,EAAKC,SAAL,eACGD,EAAOE,KAAOF,EAAOG,SAZZ,EAsEdC,MAAQ,WAAO,IAAD,EACW,EAAKC,MAApBC,EADI,EACJA,KAAMC,EADF,EACEA,KACd,OAAI,EAAKF,MAAMG,OAASF,GACtBG,MAAM,mCACC,GACE,EAAKJ,MAAMK,OAASH,IAC7BE,MAAM,6BACC,IA7EG,EAkFdE,QAAU,WACJ,EAAKP,SACP,EAAKQ,MAAMC,QAAQ,YAlFrB,IAAIC,EAAQC,KAAKC,MAAMC,eAAeC,QAAQ,UAAY,GAF9C,OAGZ,EAAKb,MAAQ,CACXG,KAAMM,EAAMN,KACZE,KAAM,GACNJ,KAAMQ,EAAMN,KACZD,KAAMO,EAAMJ,MAPF,E,iFAeO,IAAD,OAClB,IAAKO,eAAeC,QAAQ,QAM1B,OALAT,MAAM,gIACNU,YAAW,WACT,EAAKP,MAAMC,QAAQ,cAClB,MAEI,I,+BAGD,IAAD,SACgBO,KAAKf,MAApBG,EADD,EACCA,KAAME,EADP,EACOA,KACd,OACE,yBAAKW,UAAU,iBACb,+BACE,yCAEF,0BAAMA,UAAU,GAAGC,aAAa,OAC9B,oDAEE,2BACEC,KAAK,OACLrB,KAAK,OACLC,MAAOK,EACPgB,SAAUJ,KAAKrB,aAGnB,oDAEE,2BACEwB,KAAK,OACLrB,KAAK,OACLC,MAAOO,EACPc,SAAUJ,KAAKrB,aAGnB,+BACE,kBAAC,IAAD,CACEwB,KAAK,UACLF,UAAU,kBACVI,QAASL,KAAKT,SAHhB,gBAOA,kBAAC,IAAD,CACEU,UAAU,UACVI,QAAS,kBAAM,EAAKb,MAAMC,QAAQ,cAFpC,uB,GA5DuBa,aCAdC,E,YACnB,aAAe,IAAD,8BACZ,+CASF5B,UAAY,YAAiB,IAAdC,EAAa,EAAbA,OACb,EAAKC,SAAL,eACGD,EAAOE,KAAOF,EAAOG,SAZZ,EAqEdyB,SAAW,WAAO,IAAD,EACqB,EAAKvB,MAAjCG,EADO,EACPA,KAAME,EADC,EACDA,KAAMmB,EADL,EACKA,KAAMC,EADX,EACWA,MAC1B,OAAKtB,EAAKuB,QAAUvB,EAAKwB,OAAS,GAChCvB,MAAM,2FACC,GACGC,EAAKqB,QAAW,eAAeE,KAAKvB,GAGnCA,IAASmB,GACpBpB,MAAM,mFACC,MAENqB,EAAMC,SACN,2DAA2DE,KAAKH,MAEjErB,MAAM,+CACC,IAVPA,MAAM,kIACC,IA5EG,EA2FdyB,WAAa,WACX,GAAI,EAAKN,WAAY,CACnB,IAAIO,EAAM,GACVA,EAAI3B,KAAO,EAAKH,MAAMG,KACtB2B,EAAIzB,KAAO,EAAKL,MAAMK,KACtBO,eAAemB,QAAQ,OAAQrB,KAAKsB,UAAUF,IAC9C,EAAKvB,MAAMC,QAAQ,WA/FrB,EAAKR,MAAQ,CACXG,KAAM,GACNE,KAAM,GACNmB,KAAM,GACNC,MAAO,IANG,E,sEAeJ,IAAD,SAC6BV,KAAKf,MAAjCG,EADD,EACCA,KAAME,EADP,EACOA,KAAMmB,EADb,EACaA,KAAMC,EADnB,EACmBA,MAC1B,OACE,yBAAKT,UAAU,oBACb,0BAAMC,aAAa,OACjB,oDAEE,2BACEC,KAAK,OACLrB,KAAK,OACLC,MAAOK,EACPgB,SAAUJ,KAAKrB,aAGnB,oDAEE,2BACEwB,KAAK,WACLrB,KAAK,OACLC,MAAOO,EACPc,SAAUJ,KAAKrB,aAGnB,oDAEE,2BACEwB,KAAK,WACLrB,KAAK,OACLC,MAAO0B,EACPL,SAAUJ,KAAKrB,aAGnB,oDAEE,2BACEwB,KAAK,OACLrB,KAAK,QACLC,MAAO2B,EACPN,SAAUJ,KAAKrB,aAGnB,+BACE,kBAAC,IAAD,CAAQwB,KAAK,UAAUE,QAASL,KAAKc,YAArC,gBAGA,kBAAC,IAAD,CAAQX,KAAK,UAAUE,QAAS,kBAAM,EAAKb,MAAMC,QAAQ,WAAzD,uB,GA7D0Ba,a,0BCA9BY,G,MAA2BC,IAA3BD,QAAQE,EAAmBD,IAAnBC,MAAOC,EAAYF,IAAZE,QAEjBC,EAAO,CACX,CAAEC,SAAU,YAAaC,GAAI,UAAWC,MAAO,oDAC/C,CAAEF,SAAU,WAAYC,GAAI,YAAaC,MAAO,kCAChD,CAAEF,SAAU,OAAQC,GAAI,WAAYC,MAAO,kBAC3C,CAAEF,SAAU,UAAWC,GAAI,aAAcC,MAAO,mBAChD,CAAEF,SAAU,UAAWC,GAAI,WAAYC,MAAO,oBA6DjCC,E,2MA1DbzC,MAAQ,CACN0C,WAAW,G,EAGbC,OAAS,WACP,EAAK/C,SAAS,CACZ8C,WAAY,EAAK1C,MAAM0C,a,wEAIjB,IAAD,OACP,OACE,kBAAC,IAAD,KACE,kBAACP,EAAD,CACES,QAAS,KACTC,aAAW,EACXH,UAAW3B,KAAKf,MAAM0C,UACtB1B,UAAU,8BAEV,yBAAKA,UAAU,SACf,kBAAC,IAAD,CAAM8B,MAAM,OAAOC,KAAK,SAASC,oBAAqB,CAAC,QACpDX,EAAKY,KAAI,SAACC,EAAMC,GACf,OACE,kBAAC,IAAKC,KAAN,CACEC,IAAKH,EAAKX,IAAMY,EAChB/B,QAAS,kBAAM,EAAKb,MAAM+C,SAASJ,EAAKX,MAExC,kBAAC,IAAD,CAAMrB,KAAMgC,EAAKZ,WACjB,8BAAOY,EAAKV,aAMtB,kBAAC,IAAD,KACE,kBAACP,EAAD,CAAQsB,MAAO,CAAEC,WAAY,OAAQC,QAAS,IAC5C,kBAAC,IAAD,CACEzC,UAAU,UACVE,KAAMH,KAAKf,MAAM0C,UAAY,cAAgB,YAC7CtB,QAASL,KAAK4B,SAEhB,kBAAC,IAAD,CAAQzB,KAAK,WAAb,YAEF,kBAACkB,EAAD,CACEmB,MAAO,CACLG,OAAQ,YACRD,QAAS,GACTD,WAAY,OACZG,UAAW,MAGZ5C,KAAKR,MAAMqD,gB,GApDLvC,a,kBCTXwC,EAAUC,IAAVD,MAEFxB,EAAO,CAGX,CACEE,GAAI,EACJwB,KACE,wNAEFC,QAAS,gBACTC,OAAQ,gDAERC,KACE,gGACFC,SAAU,2BACVC,QAAS,2BAETC,SAAU,eACVC,UACE,gSAEFC,UAAW,eACXC,WAAY,oBACZC,WAAY,iFAEZC,YAAa,eACbC,aACE,qMAGJ,CACEpC,GAAI,EACJwB,KAAM,4HAENC,QAAS,gBACTC,OAAQ,aAERC,KACE,+FACFC,SAAU,yBACVC,QAAS,2BAETC,SAAU,eACVC,UAAW,uKAGb,CACE/B,GAAI,EACJwB,KACE,mUAEFC,QAAS,gBACTC,OAAQ,kCAERC,KACE,gGACFC,SAAU,0BACVC,QAAS,2BAETC,SAAU,eACVC,UACE,o+BACFM,WACE,idAEFL,UAAW,eACXC,WACE,izBACFC,WACE,kqBAEFI,QAAS,qBACTC,SAAU,yIAGZ,CACEvC,GAAI,EACJwB,KAAM,wJAENC,QAAS,gBACTC,OAAQ,qBAERC,KACE,iGACFC,SAAU,2BACVC,QAAS,2BAETC,SAAU,eACVC,UACE,mfAEFC,UAAW,eACXC,WAAY,SACZC,WACE,oUAEFI,QAAS,qBACTC,SACE,+NAIAC,EAAQ,CAEZ,CACExC,GAAI,EACJyC,MAAO,4EACPC,SAAU,CACRzC,MAAO,WACP0C,OAAQ,UACRC,OAAQ,WACRC,OAAQ,cAKRC,EAAM,CACV,CACE9C,GAAI,EACJwB,KAAM,qHAENC,QAAS,gBACTC,OAAQ,mBAERC,KACE,mGACFC,SAAU,8BACVC,QAAS,2BAETC,SAAU,eACVC,UACE,2NAEFO,QAAS,qBACTC,SAAU,0FAEZ,CACEvC,GAAI,EACJwB,KAAM,4HAENC,QAAS,gBACTC,OAAQ,2BAERC,KACE,kGACFC,SAAU,6BACVC,QAAS,2BAETC,SAAU,eACVC,UACE,qVACFM,WACE,kSACFU,WAAY,oFACZC,WACE,yXACFC,WACE,qNAEFjB,UAAW,eACXC,WAAY,QACZC,WACE,8NAEFI,QAAS,qBACTC,SAAU,0FAEZ,CACEvC,GAAI,EACJwB,KAAM,8GAENC,QAAS,gBACTC,OAAQ,qBACRwB,QAAS,qBAETvB,KACE,mGACFC,SAAU,8BACVC,QAAS,2BAETC,SAAU,eACVC,UAAW,8DACXM,WACE,mLACFU,WAAY,sCACZC,WAAY,oJACZC,WAAY,0JAEd,CACEjD,GAAI,EACJwB,KACE,oOAEFC,QAAS,gBACTC,OAAQ,sBAERC,KACE,yFACFC,SAAU,UACVC,QAAS,2BAETC,SAAU,eACVC,UACE,4bACFM,WACE,4TAEFL,UAAW,eACXC,WAAY,QACZC,WAAY,8DAEZI,QAAS,qBACTC,SAAU,wGAEZ,CACEvC,GAAI,EACJwB,KACE,yVAEFC,QAAS,gBACTC,OAAQ,4BAERC,KACE,0FACFC,SAAU,SACVC,QAAS,2BAETC,SAAU,eACVC,UAAW,yIAEXC,UAAW,eACXC,WAAY,QACZC,WAAY,mDAEZI,QAAS,qBACTC,SAAU,mKAEZ,CACEvC,GAAI,EACJwB,KACE,+MAEFC,QAAS,gBACTC,OAAQ,mCAERC,KACE,0FACFC,SAAU,SACVC,QAAS,2BAETC,SAAU,eACVC,UAAW,yIAEXC,UAAW,eACXC,WAAY,SACZC,WAAY,QAEZI,QAAS,qBACTC,SAAU,mIACVY,SAAU,uBACVC,SAAU,gDACVC,SAAU,oDAjJF,aAoJRrD,GAAI,EACJwB,KAAM,8JAENC,QAAS,gBACTC,OAAQ,+CAERC,KACE,mGACFC,SAAU,8BACVC,QAAS,2BAETC,SAAU,eACVC,UAAW,yIAEXC,UAAW,eACXC,WAAY,6GACZC,WACE,qTACFoB,WACE,oKAEFhB,QAAS,qBACTC,SAAU,mGAEVJ,YAAa,gBA5KL,cA8KN,qNAEJ,CACEnC,GAAI,EACJwB,KAAM,yHAENC,QAAS,gBACTC,OAAQ,yBAERC,KACE,mGACFC,SAAU,8BACVC,QAAS,2BAETC,SAAU,eACVC,UAAW,yIAEXC,UAAW,eACXC,WACE,sSAEFsB,SAAU,2BACVC,UACE,sTACFC,UAAW,8HAEXnB,QAAS,qBACTC,SAAU,iHAGRmB,EAAO,CACX,CACE1D,GAAI,EACJyC,MAAO,iCACPC,SAAU,CACRzC,MAAO,YACP0C,OAAQ,aACRC,OAAQ,aACRC,OAAQ,UACRc,OAAQ,eACRC,OAAQ,aACRC,OAAQ,oBACRC,OAAQ,eAMRvE,EAAM,CACV,CACES,GAAI,EACJwB,KACE,mQAEFC,QAAS,gBACTC,OAAQ,oCAERC,KACE,2GACFC,SAAU,4BACVC,QAAS,2BAETC,SAAU,eACVC,UACE,yVACFM,WACE,y3BACFU,WAAY,+FACZC,WACE,8TACFC,WACE,sKAEFjB,UAAW,eACXC,WAAY,wCACZC,WAAY,yCAEZI,QAAS,qBACTC,SAAU,kCAEZ,CACEvC,GAAI,EACJwB,KACE,mQAEFC,QAAS,gBACTC,OAAQ,oCAERC,KACE,2GACFC,SAAU,4BACVC,QAAS,2BAETC,SAAU,eACVC,UACE,yVACFM,WACE,y3BACFU,WAAY,+FACZC,WACE,8TACFC,WACE,sKAEFjB,UAAW,eACXC,WAAY,wCACZC,WAAY,yCAEZqB,SAAU,2BACVC,UACE,sTACFC,UAAW,8HAEXnB,QAAS,qBACTC,SAAU,mCAGRwB,EAAO,CACX,CACE/D,GAAI,EACJyC,MAAO,iCACPC,SAAU,CACRzC,MAAO,WACP0C,OAAQ,aACRC,OAAQ,aACRC,OAAQ,UACRc,OAAQ,eACRC,OAAQ,aACRC,OAAQ,oBACRC,OAAQ,eAIC,aACb,OACE,6BAEE,6BACGtB,EAAM9B,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,IAAD,CAAME,IAAKH,EAAKX,IAAMY,EAAO6B,MAAO9B,EAAK8B,OACvC,uBAAGhE,UAAU,sBAAsBkC,EAAK+B,SAASzC,OACjD,uBAAGxB,UAAU,sBAAsBkC,EAAK+B,SAASC,QACjD,uBAAGlE,UAAU,sBAAsBkC,EAAK+B,SAASE,QACjD,uBAAGnE,UAAU,sBAAsBkC,EAAK+B,SAASG,aAKzD,kBAAC,IAAD,CAAUmB,iBAAkB,CAAC,QAC1BlE,EAAKY,KAAI,SAACC,EAAMC,GACf,OAEE,kBAACU,EAAD,CAAO2C,OAAQ,4BAAKtD,EAAKa,MAAYV,IAAKH,EAAKX,IAAMY,GAEnD,4BAAKD,EAAKc,SACV,2BAAId,EAAKe,QACT,2BAAIf,EAAKuC,SAET,4BAAKvC,EAAKqB,WACV,2BAAIrB,EAAKsB,YACT,2BAAItB,EAAKuB,YAET,4BAAKvB,EAAK2B,SACV,2BAAI3B,EAAK4B,UAET,4BAAK5B,EAAKmB,UACV,2BAAInB,EAAKoB,WACT,2BAAIpB,EAAK0B,YAET,4BAAK1B,EAAKwB,aACV,2BAAIxB,EAAKyB,cAET,2BAAIzB,EAAKuD,SACT,2BAAIvD,EAAKwD,UACT,2BAAIxD,EAAKyD,UAET,4BAAKzD,EAAKkB,SACT,uBAAGwC,KAAM1D,EAAKgB,MAAOhB,EAAKiB,eAMnC,6BACG8B,EAAKhD,KAAI,SAACC,EAAMC,GACf,OACE,kBAAC,IAAD,CAAME,IAAKH,EAAKX,IAAMY,EAAO6B,MAAO9B,EAAK8B,OACvC,uBAAGhE,UAAU,sBAAsBkC,EAAK+B,SAASzC,OACjD,uBAAGxB,UAAU,sBAAsBkC,EAAK+B,SAASC,QACjD,uBAAGlE,UAAU,sBAAsBkC,EAAK+B,SAASE,QACjD,uBAAGnE,UAAU,sBAAsBkC,EAAK+B,SAASG,QACjD,uBAAGpE,UAAU,sBAAsBkC,EAAK+B,SAASiB,QACjD,uBAAGlF,UAAU,sBAAsBkC,EAAK+B,SAASkB,QACjD,uBAAGnF,UAAU,sBAAsBkC,EAAK+B,SAASmB,QACjD,uBAAGpF,UAAU,sBAAsBkC,EAAK+B,SAASoB,aAKzD,kBAAC,IAAD,CAAUE,iBAAkB,CAAC,QAC1BlB,EAAIpC,KAAI,SAACC,EAAMC,GACd,OAEE,kBAACU,EAAD,CAAO2C,OAAQ,4BAAKtD,EAAKa,MAAYV,IAAKH,EAAKX,IAAMY,GAEnD,4BAAKD,EAAKc,SACV,2BAAId,EAAKe,QACT,2BAAIf,EAAKuC,SAET,4BAAKvC,EAAKqB,WACV,2BAAIrB,EAAKsB,YACT,2BAAItB,EAAKuB,YACT,2BAAIvB,EAAK2C,YAET,4BAAK3C,EAAK2B,SACV,2BAAI3B,EAAK4B,UACT,2BAAI5B,EAAKwC,UACT,2BAAIxC,EAAKyC,UACT,2BAAIzC,EAAK0C,UAET,4BAAK1C,EAAK4C,UACV,2BAAI5C,EAAK6C,WACT,2BAAI7C,EAAK8C,WAET,4BAAK9C,EAAKmB,UACV,2BAAInB,EAAKoB,WACT,2BAAIpB,EAAK0B,YACT,2BAAI1B,EAAKoC,YACT,2BAAIpC,EAAKqC,YACT,2BAAIrC,EAAKsC,YAET,4BAAKtC,EAAKwB,aACV,2BAAIxB,EAAKyB,cAET,2BAAIzB,EAAKuD,SACT,2BAAIvD,EAAKwD,UACT,2BAAIxD,EAAKyD,UAET,4BAAKzD,EAAKkB,SACT,uBAAGwC,KAAM1D,EAAKgB,MAAOhB,EAAKiB,eAMnC,6BACGmC,EAAKrD,KAAI,SAACC,EAAMC,GACf,OACE,kBAAC,IAAD,CAAME,IAAKH,EAAKX,IAAMY,EAAO6B,MAAO9B,EAAK8B,OACvC,uBAAGhE,UAAU,sBAAsBkC,EAAK+B,SAASzC,OACjD,uBAAGxB,UAAU,sBAAsBkC,EAAK+B,SAASC,QACjD,uBAAGlE,UAAU,sBAAsBkC,EAAK+B,SAASE,QACjD,uBAAGnE,UAAU,sBAAsBkC,EAAK+B,SAASG,QACjD,uBAAGpE,UAAU,sBAAsBkC,EAAK+B,SAASiB,QACjD,uBAAGlF,UAAU,sBAAsBkC,EAAK+B,SAASkB,QACjD,uBAAGnF,UAAU,sBAAsBkC,EAAK+B,SAASmB,QACjD,uBAAGpF,UAAU,sBAAsBkC,EAAK+B,SAASoB,aAKzD,kBAAC,IAAD,CAAUE,iBAAkB,CAAC,QAC1BzE,EAAImB,KAAI,SAACC,EAAMC,GACd,OAEE,kBAACU,EAAD,CAAO2C,OAAQ,4BAAKtD,EAAKa,MAAYV,IAAKH,EAAKX,IAAMY,GAEnD,4BAAKD,EAAKc,SACV,2BAAId,EAAKe,QACT,2BAAIf,EAAKuC,SAET,4BAAKvC,EAAKqB,WACV,2BAAIrB,EAAKsB,YACT,2BAAItB,EAAKuB,YACT,2BAAIvB,EAAK2C,YAET,4BAAK3C,EAAK2B,SACV,2BAAI3B,EAAK4B,UACT,2BAAI5B,EAAKwC,UACT,2BAAIxC,EAAKyC,UACT,2BAAIzC,EAAK0C,UAET,4BAAK1C,EAAK4C,UACV,2BAAI5C,EAAK6C,WACT,2BAAI7C,EAAK8C,WAET,4BAAK9C,EAAKmB,UACV,2BAAInB,EAAKoB,WACT,2BAAIpB,EAAK0B,YACT,2BAAI1B,EAAKoC,YACT,2BAAIpC,EAAKqC,YACT,2BAAIrC,EAAKsC,YAET,4BAAKtC,EAAKwB,aACV,2BAAIxB,EAAKyB,cAET,2BAAIzB,EAAKuD,SACT,2BAAIvD,EAAKwD,UACT,2BAAIxD,EAAKyD,UAET,4BAAKzD,EAAKkB,SACT,uBAAGwC,KAAM1D,EAAKgB,MAAOhB,EAAKiB,iBCplB1B,aACb,OACE,6BACE,qCCHS,aACb,OACE,6BACE,qCCHS,aACb,OACE,6BACE,qCCHS,aACb,OACE,6BACE,qCCSe0C,E,YACnB,aAAe,IAAD,8BACZ,+CAWFvD,SAAW,SAAAd,GACTsE,OAAOC,SAASC,KAAOxE,EACvB,EAAK5C,SAAS,CACZqH,MAAOzE,KAfG,EAmBdhC,QAAU,SAAA6B,GACRyE,OAAOC,SAASC,KAAO3E,GAlBvB,EAAKrC,MAAQ,CACXkH,MAAOJ,OAAOC,SAASC,KAAKG,MAAM,IAAM,WACxCF,MAAO,WAETH,OAAOM,aAAe,WACpB,EAAKxH,SAAS,CACZsH,MAAOJ,OAAOC,SAASC,KAAKG,MAAM,MAR1B,E,sEAuBZ,IAAIE,EAAM,GACV,OAAQtG,KAAKf,MAAMiH,OACjB,IAAK,WACHI,EAAM,kBAAC,EAAD,CAAU7G,QAASO,KAAKP,UAC9B,MACF,IAAK,QACH6G,EAAM,kBAAC,EAAD,CAAO7G,QAASO,KAAKP,UAC3B,MACF,IAAK,UACH6G,EAAM,kBAAC,EAAD,MACN,MACF,IAAK,YACHA,EAAM,kBAAC,EAAD,MACN,MACF,IAAK,WACHA,EAAM,kBAAC,EAAD,MACN,MACF,IAAK,aACHA,EAAM,kBAACC,EAAD,MACN,MACF,IAAK,WACHD,EAAM,kBAACE,EAAD,MAGV,OACE,6BACuB,YAApBxG,KAAKf,MAAMkH,MACV,kBAAC,EAAD,CAAU1G,QAASO,KAAKP,UACF,SAApBO,KAAKf,MAAMkH,MACb,kBAAC,EAAD,CAAO1G,QAASO,KAAKP,UAErB,kBAAC,EAAD,CAAM8C,SAAUvC,KAAKuC,UAAW+D,Q,GAvDPhG,aCDfmG,QACW,cAA7BV,OAAOC,SAASU,UAEe,UAA7BX,OAAOC,SAASU,UAEhBX,OAAOC,SAASU,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b7e70160.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './index.scss';\r\nimport { Button } from 'antd';\r\n\r\nexport default class Login extends Component {\r\n  constructor() {\r\n    super();\r\n    let users = JSON.parse(sessionStorage.getItem('user')) || '';\r\n    this.state = {\r\n      user: users.user,\r\n      pass: '',\r\n      usfo: users.user,\r\n      pwfo: users.pass\r\n    };\r\n  }\r\n  setchange = ({ target }) => {\r\n    this.setState({\r\n      [target.name]: target.value\r\n    });\r\n  };\r\n  componentDidMount() {\r\n    if (!sessionStorage.getItem('user')) {\r\n      alert('您并没有注册记录，请返回注册,(2秒后自动返回)');\r\n      setTimeout(() => {\r\n        this.props.getdata('Register');\r\n      }, 2000);\r\n\r\n      return false;\r\n    }\r\n  }\r\n  render() {\r\n    const { user, pass } = this.state;\r\n    return (\r\n      <div className=\"zrb-max-login\">\r\n        <label>\r\n          <h1>Login...</h1>\r\n        </label>\r\n        <form className=\"\" autoComplete=\"off\">\r\n          <label>\r\n            账号：\r\n            <input\r\n              type=\"text\"\r\n              name=\"user\"\r\n              value={user}\r\n              onChange={this.setchange}\r\n            />\r\n          </label>\r\n          <label>\r\n            密码：\r\n            <input\r\n              type=\"text\"\r\n              name=\"pass\"\r\n              value={pass}\r\n              onChange={this.setchange}\r\n            />\r\n          </label>\r\n          <label>\r\n            <Button\r\n              type=\"primary\"\r\n              className=\"ant-btn-primary\"\r\n              onClick={this.onlogin}\r\n            >\r\n              登陆\r\n            </Button>\r\n            <Button\r\n              className=\"ant-btn\"\r\n              onClick={() => this.props.getdata('Register')}\r\n            >\r\n              注册\r\n            </Button>\r\n          </label>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n  login = () => {\r\n    const { usfo, pwfo } = this.state;\r\n    if (this.state.user !== usfo) {\r\n      alert('用户名错误');\r\n      return false;\r\n    } else if (this.state.pass !== pwfo) {\r\n      alert('密码错误');\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n  onlogin = () => {\r\n    if (this.login()) {\r\n      this.props.getdata('Summary');\r\n    }\r\n  };\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Button } from 'antd';\r\nimport './index.scss';\r\n\r\nexport default class Register extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      user: '',\r\n      pass: '',\r\n      ispa: '',\r\n      email: ''\r\n    };\r\n  }\r\n  //改变input值\r\n  setchange = ({ target }) => {\r\n    this.setState({\r\n      [target.name]: target.value\r\n    });\r\n  };\r\n  render() {\r\n    const { user, pass, ispa, email } = this.state;\r\n    return (\r\n      <div className=\"zrb-max-register\">\r\n        <form autoComplete=\"off\">\r\n          <label>\r\n            账号：\r\n            <input\r\n              type=\"text\"\r\n              name=\"user\"\r\n              value={user}\r\n              onChange={this.setchange}\r\n            />\r\n          </label>\r\n          <label>\r\n            密码：\r\n            <input\r\n              type=\"password\"\r\n              name=\"pass\"\r\n              value={pass}\r\n              onChange={this.setchange}\r\n            />\r\n          </label>\r\n          <label>\r\n            密码：\r\n            <input\r\n              type=\"password\"\r\n              name=\"ispa\"\r\n              value={ispa}\r\n              onChange={this.setchange}\r\n            />\r\n          </label>\r\n          <label>\r\n            邮箱：\r\n            <input\r\n              type=\"text\"\r\n              name=\"email\"\r\n              value={email}\r\n              onChange={this.setchange}\r\n            />\r\n          </label>\r\n          <label>\r\n            <Button type=\"primary\" onClick={this.onregister}>\r\n              注册\r\n            </Button>\r\n            <Button type=\"primary\" onClick={() => this.props.getdata('Login')}>\r\n              登陆\r\n            </Button>\r\n          </label>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n  //验证\r\n  register = () => {\r\n    const { user, pass, ispa, email } = this.state;\r\n    if (!user.trim() || user.length < 6) {\r\n      alert('用户名不能为空,且长度不小于6位');\r\n      return false;\r\n    } else if (!pass.trim() || !/^(\\w){6,20}$/.test(pass)) {\r\n      alert('密码不能为空,且必须是6-20个字母、数字、下划线');\r\n      return false;\r\n    } else if (!(pass === ispa)) {\r\n      alert('两次密码不一致，请检查密码');\r\n      return false;\r\n    } else if (\r\n      !email.trim() ||\r\n      !/^([a-zA-Z]|[0-9])(\\w|\\-)+@[a-zA-Z0-9]+\\.([a-zA-Z]{2,4})$/.test(email)\r\n    ) {\r\n      alert('邮箱格式不正确');\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n  //如果判断成功后进入登陆页面\r\n  onregister = () => {\r\n    if (this.register()) {\r\n      let obj = {};\r\n      obj.user = this.state.user;\r\n      obj.pass = this.state.pass;\r\n      sessionStorage.setItem('user', JSON.stringify(obj));\r\n      this.props.getdata('Login');\r\n    }\r\n  };\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Layout, Menu, Icon, Button } from 'antd';\r\nimport './style/index.scss';\r\n\r\nconst { Header, Sider, Content } = Layout;\r\n\r\nconst data = [\r\n  { iconType: 'pie-chart', id: 'Summary', label: '常用知识技巧总结' },\r\n  { iconType: 'box-plot', id: 'Knowledge', label: '知识点汇总' },\r\n  { iconType: 'fund', id: 'Jssenior', label: 'js高级' },\r\n  { iconType: 'sliders', id: 'Es6grammar', label: 'ES6语法' },\r\n  { iconType: 'sliders', id: 'Vueframe', label: 'VUE框架' }\r\n];\r\nclass Home extends Component {\r\n  state = {\r\n    collapsed: false\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <Sider\r\n          trigger={null}\r\n          collapsible\r\n          collapsed={this.state.collapsed}\r\n          className=\"ant-layout-sider-children \"\r\n        >\r\n          <div className=\"logo\" />\r\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['key']}>\r\n            {data.map((item, index) => {\r\n              return (\r\n                <Menu.Item\r\n                  key={item.id || index}\r\n                  onClick={() => this.props.onchange(item.id)}\r\n                >\r\n                  <Icon type={item.iconType} />\r\n                  <span>{item.label}</span>\r\n                </Menu.Item>\r\n              );\r\n            })}\r\n          </Menu>\r\n        </Sider>\r\n        <Layout>\r\n          <Header style={{ background: 'blue', padding: 0 }}>\r\n            <Icon\r\n              className=\"trigger\"\r\n              type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\r\n              onClick={this.toggle}\r\n            />\r\n            <Button type=\"primary\">Primary</Button>\r\n          </Header>\r\n          <Content\r\n            style={{\r\n              margin: '24px 16px',\r\n              padding: 24,\r\n              background: '#fff',\r\n              minHeight: 280\r\n            }}\r\n          >\r\n            {this.props.children}\r\n          </Content>\r\n        </Layout>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\nexport default Home;\r\n","import React from 'react';\r\nimport { Collapse } from 'antd';\r\nimport { Card } from 'antd';\r\nimport './style/index.scss';\r\nconst { Panel } = Collapse;\r\n//字符串的方法\r\nconst data = [\r\n  //字符串的增删改查方法\r\n  //concat方法\r\n  {\r\n    id: 1,\r\n    text:\r\n      'concat() 方法将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'str.concat(string2, string3[, ..., stringN]).',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat',\r\n    relevant: 'Array.prototype.concat()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes:\r\n      'concat 方法将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。 concat 方法并不影响原字符串。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1: 'string2...stringN',\r\n    parameter2: '和原字符串连接的多个字符串',\r\n    //性能\r\n    performance: '性能',\r\n    performance1:\r\n      '强烈建议使用 赋值操作符（+, +=）代替 concat 方法。参看 性能测试（perfomance test）。 '\r\n  },\r\n  //trim() 方法\r\n  {\r\n    id: 2,\r\n    text: 'trim() 方法会从一个字符串的两端删除空白字符。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'str.trim()',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim',\r\n    relevant: 'Array.prototype.trim()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes: 'trim() 方法并不影响原字符串本身，它返回的是一个新的字符串。'\r\n  },\r\n  //split()方法\r\n  {\r\n    id: 3,\r\n    text:\r\n      'split() 方法使用指定的分隔符字符串将一个String对象分割成字符串数组，以将字符串分隔为子字符串，以确定每个拆分的位置。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'str.split([separator[, limit]])',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split',\r\n    relevant: 'Array.prototype.split()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes:\r\n      '找到分隔符后，将其从字符串中删除，并将子字符串的数组返回。如果没有找到或者省略了分隔符，则该数组包含一个由整个字符串组成的元素。如果分隔符为空字符串，则将str转换为字符数组。如果分隔符出现在字符串的开始或结尾，或两者都分开，分别以空字符串开头，结尾或两者开始和结束。因此，如果字符串仅由一个分隔符实例组成，则该数组由两个空字符串组成。',\r\n    describes2:\r\n      '如果分隔符是包含捕获括号的正则表达式，则每次分隔符匹配时，捕获括号的结果（包括任何未定义的结果）将被拼接到输出数组中。但是，并不是所有浏览器都支持此功能。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1:\r\n      'separator :指定表示每个拆分应发生的点的字符串。separator 可以是一个字符串或正则表达式。 如果纯文本分隔符包含多个字符，则必须找到整个字符串来表示分割点。如果在str中省略或不出现分隔符，则返回的数组包含一个由整个字符串组成的元素。如果分隔符为空字符串，则将str原字符串中每个字符的数组形式返回。',\r\n    parameter2:\r\n      'limit一个整数，限定返回的分割片段数量。当提供此参数时，split 方法会在指定分隔符的每次出现时分割该字符串，但在限制条目已放入数组时停止。如果在达到指定限制之前达到字符串的末尾，它可能仍然包含少于限制的条目。新数组中不返回剩下的文本。',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '返回源字符串以分隔符出现位置分隔而成的一个 Array '\r\n  },\r\n  //search() 方法\r\n  {\r\n    id: 4,\r\n    text: 'search() 方法执行正则表达式和 String 对象之间的一个搜索匹配。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'str.search(regexp)',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search',\r\n    relevant: 'Array.prototype.search()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes:\r\n      '当你想要知道字符串中是否存在某个模式（pattern）时可使用 search()，类似于正则表达式的 test() 方法。当要了解更多匹配信息时，可使用 match()（但会更慢一些），该方法类似于正则表达式的 exec() 方法。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1: 'regexp',\r\n    parameter2:\r\n      '一个正则表达式（regular expression）对象。如果传入一个非正则表达式对象 obj，则会使用 new RegExp(obj) 隐式地将其转换为正则表达式对象。',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1:\r\n      '如果匹配成功，则 search() 返回正则表达式在字符串中首次匹配项的索引;否则，返回 -1。'\r\n  }\r\n];\r\n\r\nconst data2 = [\r\n  //字符串的增删改查方法\r\n  {\r\n    id: 1,\r\n    title: '字符串的 ·增 删 改 查· 方法',\r\n    chidlren: {\r\n      label: 'concat()',\r\n      label2: 'trim() ',\r\n      label3: 'split() ',\r\n      label4: 'search()'\r\n    }\r\n  }\r\n];\r\n//数组的方法\r\nconst num = [\r\n  {\r\n    id: 1,\r\n    text: 'valueOf() 方法返回一个被 Number 对象包装的原始值。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'numObj.valueOf()',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toSource',\r\n    relevant: 'Number.prototype.toSource()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes:\r\n      '该方法通常是由 JavaScript 引擎在内部隐式调用的，而不是由用户在代码中显式调用的。',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '表示指定 Number 对象的原始值的数字'\r\n  },\r\n  {\r\n    id: 2,\r\n    text: 'toString() 方法返回指定 Number 对象的字符串表示形式。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'numObj.toString([radix])',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed',\r\n    relevant: 'Number.prototype.toFixed()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes:\r\n      'Number 对象覆盖了 Object 对象上的 toString() 方法，它不是继承的 Object.prototype.toString()。对于 Number 对象，toString() 方法以指定的基数返回该对象的字符串表示。',\r\n    describes2:\r\n      '如果转换的基数大于10，则会使用字母来表示大于9的数字，比如基数为16的情况，则使用a到f的字母来表示10到15。',\r\n    describes3: '如果基数没有指定，则使用 10。',\r\n    describes4:\r\n      '如果对象是负数，则会保留负号。即使radix是2时也是如此：返回的字符串包含一个负号（-）前缀和正数的二进制表示，不是 数值的二进制补码。',\r\n    describes5:\r\n      '进行数字到字符串的转换时，建议用小括号将要转换的目标括起来，防止出错。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1: 'radix',\r\n    parameter2:\r\n      '指定要用于数字到字符串的转换的基数(从2到36)。如果未指定 radix 参数，则默认值为 10。',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '表示指定 Number 对象的原始值的数字'\r\n  },\r\n  {\r\n    id: 3,\r\n    text: 'toSource() 方法返回该对象源码的字符串表示。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'numObj.toSource();',\r\n    method2: 'Number.toSource();',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource',\r\n    relevant: 'Object.prototype.toSource()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes: 'toSource() 方法返回下列值：',\r\n    describes2:\r\n      '对于内置 Number 对象， toSource() 返回下面字符串，用来指明源码是不可见的',\r\n    describes3: 'function Number() { [native code] }',\r\n    describes4: '对于 Number 对象的实例，toSource() 返回一个表示源码的字符串。',\r\n    describes5: '该方法通常被 JavaScript 内部调用，而不是在代码中显示调用。'\r\n  },\r\n  {\r\n    id: 4,\r\n    text:\r\n      'Number.isNaN() 方法确定传递的值是否为 NaN和其类型是 Number。它是原始的全局isNaN()的更强大的版本。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'Number.isNaN(value)',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isNaN',\r\n    relevant: 'isNaN()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes:\r\n      '在 JavaScript 中，NaN 最特殊的地方就是，我们不能使用相等运算符（== 和 ===）来判断一个值是否是 NaN，因为 NaN == NaN 和 NaN === NaN 都会返回 false。因此，必须要有一个判断值是否是 NaN 的方法。',\r\n    describes2:\r\n      '和全局函数 isNaN() 相比，该方法不会强制将参数转换成数字，只有在参数是真正的数字类型，且值为 NaN 的时候才会返回 true。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1: 'value',\r\n    parameter2: '要被检测是否是 NaN 的值',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '一个布尔值，表示给定的值是否是 NaN。'\r\n  },\r\n  {\r\n    id: 5,\r\n    text:\r\n      'Number.parseFloat() 方法可以把一个字符串解析成浮点数。该方法与全局的 parseFloat() 函数相同，并且处于 ECMAScript 6 规范中（用于全局变量的模块化）。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'Number.parseFloat(string)',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number',\r\n    relevant: 'Number',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes: '请移步全局函数 parseFloat() 页面查看更多的解释和示例。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1: 'value',\r\n    parameter2: '被解析的字符串。',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '给定值被解析成浮点数，如果无法被解析成浮点数，则返回NaN'\r\n  },\r\n  {\r\n    id: 6,\r\n    text:\r\n      'Number.parseInt() 方法依据指定基数 [ 参数 radix 的值]，把字符串 [ 参数 string 的值] 解析成整数。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'Number.parseInt(string[, radix])',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number',\r\n    relevant: 'Number',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes: '请移步全局函数 parseFloat() 页面查看更多的解释和示例。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1: 'string',\r\n    parameter2: 'radix',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '// radix为指定基数，即字符串以多少进制的数字表示',\r\n    retuval2: \"let strObj = '0110';\",\r\n    retuval3: 'console.log(Number.parseInt(strObj, 2)); // 6',\r\n    retuval4: 'console.log(Number.parseInt(strObj, 10)); // 110'\r\n  },\r\n  {\r\n    id: 7,\r\n    text: 'toLocaleString() 方法返回这个数字在特定语言环境下的表示字符串。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'numObj.toLocaleString([locales [, options]])',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toString',\r\n    relevant: 'Number.prototype.toString()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes: '请移步全局函数 parseFloat() 页面查看更多的解释和示例。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1: 'options可选. 包含一些或所有的下面属性的类:',\r\n    parameter2:\r\n      'style格式化时使用的样式.可能的值有“decimal”表示纯数字格式 , “currency”表示货币格式, 和\"percent\"表示百分比格式; 默认值是 \"decimal\".',\r\n    parameter3:\r\n      'localeMatcher使用的local的匹配算法. 可能的值有\"lookup\"和\"best fit\"; 默认值是 \"best fit\". ',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '返回一个语言环境下的表示字符串。',\r\n    //性能\r\n    performance: '性能',\r\n    performance:\r\n      '当格式化大量数字时，最好建立一个 NumberFormat 对象并且使用它提供的 NumberFormat.format 方法。'\r\n  },\r\n  {\r\n    id: 8,\r\n    text: 'toFixed() 方法使用定点表示法来格式化一个数值。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'numObj.toFixed(digits)',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toString',\r\n    relevant: 'Number.prototype.toString()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes: '请移步全局函数 parseFloat() 页面查看更多的解释和示例。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1:\r\n      'digits小数点后数字的个数；介于 0 到 20 （包括）之间，实现环境可能支持更大范围。如果忽略该参数，则默认为 0。',\r\n    //抛出异常\r\n    abnormal: '抛出异常',\r\n    abnormal1:\r\n      'RangeError如果 digits 参数太小或太大。0 到 20（包括）之间的值不会引起 RangeError。实现环境（implementations）也可以支持更大或更小的值。',\r\n    abnormal2: 'TypeError如果该方法在一个非Number类型的对象上调用。',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '使用定点表示法表示给定数字的字符串。'\r\n  }\r\n];\r\nconst num2 = [\r\n  {\r\n    id: 1,\r\n    title: '数字的方法',\r\n    chidlren: {\r\n      label: 'valueOf()',\r\n      label2: 'toString()',\r\n      label3: 'toSource()',\r\n      label4: 'isNaN()',\r\n      label5: 'parseFloat()',\r\n      label6: 'parseInt()',\r\n      label7: 'toLocaleString() ',\r\n      label8: 'toFixed()'\r\n    }\r\n  }\r\n];\r\n\r\n//对象的方法\r\nconst obj = [\r\n  {\r\n    id: 1,\r\n    text:\r\n      'Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'Object.assign(target, ...sources)',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties',\r\n    relevant: 'Object.defineProperties()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes:\r\n      '如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。后面的源对象的属性将类似地覆盖前面的源对象的属性。',\r\n    describes2:\r\n      'Object.assign 方法只会拷贝源对象自身的并且可枚举的属性到目标对象。该方法使用源对象的[[Get]]和目标对象的[[Set]]，所以它会调用相关 getter 和 setter。因此，它分配属性，而不仅仅是复制或定义新的属性。如果合并源包含getter，这可能使其不适合将新属性合并到原型中。为了将属性定义（包括其可枚举性）复制到原型，应使用Object.getOwnPropertyDescriptor()和Object.defineProperty() 。',\r\n    describes3: 'String类型和 Symbol 类型的属性都会被拷贝',\r\n    describes4:\r\n      '在出现错误的情况下，例如，如果属性不可写，会引发TypeError，如果在引发错误之前添加了任何属性，则可以更改target对象。',\r\n    describes5:\r\n      '注意，Object.assign 不会在那些source对象值为 null 或 undefined 的时候抛出错误。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1: 'target ：目标对象',\r\n    parameter2: 'sources ：源对象。',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '目标对象。'\r\n  },\r\n  {\r\n    id: 2,\r\n    text:\r\n      'Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'Object.assign(target, ...sources)',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties',\r\n    relevant: 'Object.defineProperties()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes:\r\n      '如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。后面的源对象的属性将类似地覆盖前面的源对象的属性。',\r\n    describes2:\r\n      'Object.assign 方法只会拷贝源对象自身的并且可枚举的属性到目标对象。该方法使用源对象的[[Get]]和目标对象的[[Set]]，所以它会调用相关 getter 和 setter。因此，它分配属性，而不仅仅是复制或定义新的属性。如果合并源包含getter，这可能使其不适合将新属性合并到原型中。为了将属性定义（包括其可枚举性）复制到原型，应使用Object.getOwnPropertyDescriptor()和Object.defineProperty() 。',\r\n    describes3: 'String类型和 Symbol 类型的属性都会被拷贝',\r\n    describes4:\r\n      '在出现错误的情况下，例如，如果属性不可写，会引发TypeError，如果在引发错误之前添加了任何属性，则可以更改target对象。',\r\n    describes5:\r\n      '注意，Object.assign 不会在那些source对象值为 null 或 undefined 的时候抛出错误。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1: 'target ：目标对象',\r\n    parameter2: 'sources ：源对象。',\r\n    //抛出异常\r\n    abnormal: '抛出异常',\r\n    abnormal1:\r\n      'RangeError如果 digits 参数太小或太大。0 到 20（包括）之间的值不会引起 RangeError。实现环境（implementations）也可以支持更大或更小的值。',\r\n    abnormal2: 'TypeError如果该方法在一个非Number类型的对象上调用。',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '目标对象。'\r\n  }\r\n];\r\nconst obj2 = [\r\n  {\r\n    id: 1,\r\n    title: '对象的方法',\r\n    chidlren: {\r\n      label: 'assign()',\r\n      label2: 'toString()',\r\n      label3: 'toSource()',\r\n      label4: 'isNaN()',\r\n      label5: 'parseFloat()',\r\n      label6: 'parseInt()',\r\n      label7: 'toLocaleString() ',\r\n      label8: 'toFixed()'\r\n    }\r\n  }\r\n];\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      {/* 字符串的方法 */}\r\n      <div>\r\n        {data2.map((item, index) => {\r\n          return (\r\n            <Card key={item.id || index} title={item.title}>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label2}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label3}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label4}</p>\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n      <Collapse defaultActiveKey={['key']}>\r\n        {data.map((item, index) => {\r\n          return (\r\n            // 标题\r\n            <Panel header={<h1>{item.text}</h1>} key={item.id || index}>\r\n              {/* 语法 */}\r\n              <h2>{item.grammar}</h2>\r\n              <p>{item.method}</p>\r\n              <p>{item.method2}</p>\r\n              {/* 参数 */}\r\n              <h1>{item.parameter}</h1>\r\n              <p>{item.parameter1}</p>\r\n              <p>{item.parameter2}</p>\r\n              {/* 返回值 */}\r\n              <h1>{item.retuval}</h1>\r\n              <p>{item.retuval1}</p>\r\n              {/* 描述 */}\r\n              <h2>{item.describe}</h2>\r\n              <p>{item.describes}</p>\r\n              <p>{item.describes2}</p>\r\n              {/* 性能 */}\r\n              <h1>{item.performance}</h1>\r\n              <p>{item.performance1}</p>\r\n              {/* 例子 */}\r\n              <p>{item.example}</p>\r\n              <p>{item.example1}</p>\r\n              <p>{item.example2}</p>\r\n              {/* 相关链接 */}\r\n              <h2>{item.Connect}</h2>\r\n              {<a href={item.link}>{item.relevant}</a>}\r\n            </Panel>\r\n          );\r\n        })}\r\n      </Collapse>\r\n      {/* 数组的一些方法 */}\r\n      <div>\r\n        {num2.map((item, index) => {\r\n          return (\r\n            <Card key={item.id || index} title={item.title}>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label2}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label3}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label4}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label5}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label6}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label7}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label8}</p>\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n      <Collapse defaultActiveKey={['key']}>\r\n        {num.map((item, index) => {\r\n          return (\r\n            // 标题\r\n            <Panel header={<h1>{item.text}</h1>} key={item.id || index}>\r\n              {/* 语法 */}\r\n              <h2>{item.grammar}</h2>\r\n              <p>{item.method}</p>\r\n              <p>{item.method2}</p>\r\n              {/* 参数 */}\r\n              <h1>{item.parameter}</h1>\r\n              <p>{item.parameter1}</p>\r\n              <p>{item.parameter2}</p>\r\n              <p>{item.parameter3}</p>\r\n              {/* 返回值 */}\r\n              <h1>{item.retuval}</h1>\r\n              <p>{item.retuval1}</p>\r\n              <p>{item.retuval2}</p>\r\n              <p>{item.retuval3}</p>\r\n              <p>{item.retuval4}</p>\r\n              {/* 抛出异常 */}\r\n              <h1>{item.abnormal}</h1>\r\n              <p>{item.abnormal1}</p>\r\n              <p>{item.abnormal2}</p>\r\n              {/* 描述 */}\r\n              <h2>{item.describe}</h2>\r\n              <p>{item.describes}</p>\r\n              <p>{item.describes2}</p>\r\n              <p>{item.describes3}</p>\r\n              <p>{item.describes4}</p>\r\n              <p>{item.describes5}</p>\r\n              {/* 性能 */}\r\n              <h1>{item.performance}</h1>\r\n              <p>{item.performance1}</p>\r\n              {/* 例子 */}\r\n              <p>{item.example}</p>\r\n              <p>{item.example1}</p>\r\n              <p>{item.example2}</p>\r\n              {/* 相关链接 */}\r\n              <h2>{item.Connect}</h2>\r\n              {<a href={item.link}>{item.relevant}</a>}\r\n            </Panel>\r\n          );\r\n        })}\r\n      </Collapse>\r\n      {/* 对象的方法 */}\r\n      <div>\r\n        {obj2.map((item, index) => {\r\n          return (\r\n            <Card key={item.id || index} title={item.title}>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label2}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label3}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label4}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label5}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label6}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label7}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label8}</p>\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n      <Collapse defaultActiveKey={['key']}>\r\n        {obj.map((item, index) => {\r\n          return (\r\n            // 标题\r\n            <Panel header={<h1>{item.text}</h1>} key={item.id || index}>\r\n              {/* 语法 */}\r\n              <h2>{item.grammar}</h2>\r\n              <p>{item.method}</p>\r\n              <p>{item.method2}</p>\r\n              {/* 参数 */}\r\n              <h1>{item.parameter}</h1>\r\n              <p>{item.parameter1}</p>\r\n              <p>{item.parameter2}</p>\r\n              <p>{item.parameter3}</p>\r\n              {/* 返回值 */}\r\n              <h1>{item.retuval}</h1>\r\n              <p>{item.retuval1}</p>\r\n              <p>{item.retuval2}</p>\r\n              <p>{item.retuval3}</p>\r\n              <p>{item.retuval4}</p>\r\n              {/* 抛出异常 */}\r\n              <h1>{item.abnormal}</h1>\r\n              <p>{item.abnormal1}</p>\r\n              <p>{item.abnormal2}</p>\r\n              {/* 描述 */}\r\n              <h2>{item.describe}</h2>\r\n              <p>{item.describes}</p>\r\n              <p>{item.describes2}</p>\r\n              <p>{item.describes3}</p>\r\n              <p>{item.describes4}</p>\r\n              <p>{item.describes5}</p>\r\n              {/* 性能 */}\r\n              <h1>{item.performance}</h1>\r\n              <p>{item.performance1}</p>\r\n              {/* 例子 */}\r\n              <p>{item.example}</p>\r\n              <p>{item.example1}</p>\r\n              <p>{item.example2}</p>\r\n              {/* 相关链接 */}\r\n              <h2>{item.Connect}</h2>\r\n              {<a href={item.link}>{item.relevant}</a>}\r\n            </Panel>\r\n          );\r\n        })}\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <h1>123</h1>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <h1>123</h1>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <h1>456</h1>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <h1>456</h1>\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from 'react';\r\n//登陆注册组件\r\nimport Login from './login';\r\nimport Register from './register';\r\n\r\n//相关笔记页面\r\nimport Home from '../note/home';\r\nimport Summary from '../note/summary';\r\nimport Knowledge from '../note/knowledge';\r\nimport Jssenior from '../note/Js-senior';\r\nimport Es6grammar from '../note/Es6grammar';\r\nimport Vueframe from '../note/Vueframe';\r\n\r\nexport default class Index extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isCom: window.location.hash.slice(1) || 'Register',\r\n      coust: 'Summary'\r\n    };\r\n    window.onhashchange = () => {\r\n      this.setState({\r\n        isCom: window.location.hash.slice(1)\r\n      });\r\n    };\r\n  }\r\n  onchange = label => {\r\n    window.location.hash = label;\r\n    this.setState({\r\n      coust: label\r\n    });\r\n  };\r\n  //返回的页面数据\r\n  getdata = data => {\r\n    window.location.hash = data;\r\n  };\r\n  render() {\r\n    let Dom = '';\r\n    switch (this.state.coust) {\r\n      case 'Register':\r\n        Dom = <Register getdata={this.getdata} />;\r\n        break;\r\n      case 'Login':\r\n        Dom = <Login getdata={this.getdata} />;\r\n        break;\r\n      case 'Summary':\r\n        Dom = <Summary />;\r\n        break;\r\n      case 'Knowledge':\r\n        Dom = <Knowledge />;\r\n        break;\r\n      case 'Jssenior':\r\n        Dom = <Jssenior />;\r\n        break;\r\n      case 'Es6grammar':\r\n        Dom = <Es6grammar />;\r\n        break;\r\n      case 'Vueframe':\r\n        Dom = <Vueframe />;\r\n        break;\r\n    }\r\n    return (\r\n      <div>\r\n        {this.state.isCom == 'Register' ? (\r\n          <Register getdata={this.getdata} />\r\n        ) : this.state.isCom == 'Login' ? (\r\n          <Login getdata={this.getdata} />\r\n        ) : (\r\n          <Home onchange={this.onchange}>{Dom}</Home>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './astes/index.css';\nimport App from './login/';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}