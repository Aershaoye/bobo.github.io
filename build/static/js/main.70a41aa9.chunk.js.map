{"version":3,"sources":["login/login.jsx","login/register.jsx","note/home.jsx","note/summary.jsx","note/knowledge.jsx","note/Js-senior.jsx","note/Es6grammar.jsx","note/Vueframe.jsx","note/pramise.jsx","login/index.jsx","serviceWorker.js","index.js"],"names":["Login","setchange","target","setState","name","value","login","state","usfo","pwfo","user","alert","pass","onlogin","props","getdata","users","JSON","parse","sessionStorage","getItem","setTimeout","this","className","autoComplete","type","onChange","onClick","Component","Register","register","ispa","email","trim","length","test","onregister","obj","setItem","stringify","Header","Layout","Sider","Content","data","iconType","id","label","Home","collapsed","toggle","trigger","collapsible","theme","mode","defaultSelectedKeys","map","item","index","Item","key","onchange","style","background","padding","margin","minHeight","children","Panel","Collapse","text","grammar","method","link","relevant","Connect","describe","describes","parameter","parameter1","parameter2","performance","performance1","describes2","retuval","retuval1","data2","title","chidlren","label2","label3","label4","num","describes3","describes4","describes5","method2","retuval2","retuval3","retuval4","parameter3","abnormal","abnormal1","abnormal2","num2","label5","label6","label7","label8","remarks","remarks1","parameter4","obj2","arra","arra2","defaultActiveKey","header","example","example1","example2","href","columns","dataIndex","render","money","address","bordered","width","dataSource","dom","label1","gutter","span","template","describe1","rows","rows1","rows2","src","alt","data3","data4","data5","data6","data7","data8","data9","size","renderItem","Index","window","location","hash","isCom","slice","onhashchange","Dom","Es6grammar","Vueframe","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uUAIqBA,E,YACnB,aAAe,IAAD,uBACZ,+CASFC,UAAY,YAAiB,IAAdC,EAAa,EAAbA,OACb,EAAKC,SAAL,eACGD,EAAOE,KAAOF,EAAOG,SAZZ,EAsEdC,MAAQ,WAAO,IAAD,EACW,EAAKC,MAApBC,EADI,EACJA,KAAMC,EADF,EACEA,KACd,OAAI,EAAKF,MAAMG,OAASF,GACtBG,MAAM,mCACC,GACE,EAAKJ,MAAMK,OAASH,IAC7BE,MAAM,6BACC,IA7EG,EAkFdE,QAAU,WACJ,EAAKP,SACP,EAAKQ,MAAMC,QAAQ,YAlFrB,IAAIC,EAAQC,KAAKC,MAAMC,eAAeC,QAAQ,UAAY,GAF9C,OAGZ,EAAKb,MAAQ,CACXG,KAAMM,EAAMN,KACZE,KAAM,GACNJ,KAAMQ,EAAMN,KACZD,KAAMO,EAAMJ,MAPF,E,iFAeO,IAAD,OAClB,IAAKO,eAAeC,QAAQ,QAM1B,OALAT,MAAM,gIACNU,YAAW,WACT,EAAKP,MAAMC,QAAQ,cAClB,MAEI,I,+BAGD,IAAD,SACgBO,KAAKf,MAApBG,EADD,EACCA,KAAME,EADP,EACOA,KACd,OACE,yBAAKW,UAAU,iBACb,+BACE,yCAEF,0BAAMA,UAAU,GAAGC,aAAa,OAC9B,oDAEE,2BACEC,KAAK,OACLrB,KAAK,OACLC,MAAOK,EACPgB,SAAUJ,KAAKrB,aAGnB,oDAEE,2BACEwB,KAAK,OACLrB,KAAK,OACLC,MAAOO,EACPc,SAAUJ,KAAKrB,aAGnB,+BACE,kBAAC,IAAD,CACEwB,KAAK,UACLF,UAAU,kBACVI,QAASL,KAAKT,SAHhB,gBAOA,kBAAC,IAAD,CACEU,UAAU,UACVI,QAAS,kBAAM,EAAKb,MAAMC,QAAQ,cAFpC,uB,GA5DuBa,aCAdC,E,YACnB,aAAe,IAAD,8BACZ,+CASF5B,UAAY,YAAiB,IAAdC,EAAa,EAAbA,OACb,EAAKC,SAAL,eACGD,EAAOE,KAAOF,EAAOG,SAZZ,EAqEdyB,SAAW,WAAO,IAAD,EACqB,EAAKvB,MAAjCG,EADO,EACPA,KAAME,EADC,EACDA,KAAMmB,EADL,EACKA,KAAMC,EADX,EACWA,MAC1B,OAAKtB,EAAKuB,QAAUvB,EAAKwB,OAAS,GAChCvB,MAAM,2FACC,GACGC,EAAKqB,QAAW,eAAeE,KAAKvB,GAGnCA,IAASmB,GACpBpB,MAAM,mFACC,MAENqB,EAAMC,SACN,2DAA2DE,KAAKH,MAEjErB,MAAM,+CACC,IAVPA,MAAM,kIACC,IA5EG,EA2FdyB,WAAa,WACX,GAAI,EAAKN,WAAY,CACnB,IAAIO,EAAM,GACVA,EAAI3B,KAAO,EAAKH,MAAMG,KACtB2B,EAAIzB,KAAO,EAAKL,MAAMK,KACtBO,eAAemB,QAAQ,OAAQrB,KAAKsB,UAAUF,IAC9C,EAAKvB,MAAMC,QAAQ,WA/FrB,EAAKR,MAAQ,CACXG,KAAM,GACNE,KAAM,GACNmB,KAAM,GACNC,MAAO,IANG,E,sEAeJ,IAAD,SAC6BV,KAAKf,MAAjCG,EADD,EACCA,KAAME,EADP,EACOA,KAAMmB,EADb,EACaA,KAAMC,EADnB,EACmBA,MAC1B,OACE,yBAAKT,UAAU,oBACb,0BAAMC,aAAa,OACjB,oDAEE,2BACEC,KAAK,OACLrB,KAAK,OACLC,MAAOK,EACPgB,SAAUJ,KAAKrB,aAGnB,oDAEE,2BACEwB,KAAK,WACLrB,KAAK,OACLC,MAAOO,EACPc,SAAUJ,KAAKrB,aAGnB,oDAEE,2BACEwB,KAAK,WACLrB,KAAK,OACLC,MAAO0B,EACPL,SAAUJ,KAAKrB,aAGnB,oDAEE,2BACEwB,KAAK,OACLrB,KAAK,QACLC,MAAO2B,EACPN,SAAUJ,KAAKrB,aAGnB,+BACE,kBAAC,IAAD,CAAQwB,KAAK,UAAUE,QAASL,KAAKc,YAArC,gBAGA,kBAAC,IAAD,CAAQX,KAAK,UAAUE,QAAS,kBAAM,EAAKb,MAAMC,QAAQ,WAAzD,uB,GA7D0Ba,a,0BCA9BY,G,OAA2BC,IAA3BD,QAAQE,EAAmBD,IAAnBC,MAAOC,EAAYF,IAAZE,QAEjBC,EAAO,CACX,CAAEC,SAAU,YAAaC,GAAI,UAAWC,MAAO,oDAC/C,CAAEF,SAAU,WAAYC,GAAI,YAAaC,MAAO,kCAChD,CAAEF,SAAU,OAAQC,GAAI,WAAYC,MAAO,MAC3C,CAAEF,SAAU,YAAaC,GAAI,aAAcC,MAAO,mBAClD,CAAEF,SAAU,UAAWC,GAAI,WAAYC,MAAO,mBAC9C,CAAEF,SAAU,YAAaC,GAAI,UAAWC,MAAO,YA+DlCC,E,2MA5DbzC,MAAQ,CACN0C,WAAW,G,EAGbC,OAAS,WACP,EAAK/C,SAAS,CACZ8C,WAAY,EAAK1C,MAAM0C,a,wEAIjB,IAAD,OACP,OACE,kBAAC,IAAD,KACE,kBAACP,EAAD,CACES,QAAS,KACTC,aAAW,EACXH,UAAW3B,KAAKf,MAAM0C,UACtB1B,UAAU,8BAEV,yBAAKA,UAAU,SACf,kBAAC,IAAD,CAAM8B,MAAM,OAAOC,KAAK,SAASC,oBAAqB,CAAC,QACpDX,EAAKY,KAAI,SAACC,EAAMC,GACf,OACE,kBAAC,IAAKC,KAAN,CACEC,IAAKH,EAAKX,IAAMY,EAChB/B,QAAS,kBAAM,EAAKb,MAAM+C,SAASJ,EAAKX,MAExC,kBAAC,IAAD,CAAMrB,KAAMgC,EAAKZ,WACjB,8BAAOY,EAAKV,aAMtB,kBAAC,IAAD,KACE,kBAACP,EAAD,CAAQsB,MAAO,CAAEC,WAAY,OAAQC,QAAS,IAC5C,kBAAC,IAAD,CACEzC,UAAU,UACVE,KAAMH,KAAKf,MAAM0C,UAAY,cAAgB,YAC7CtB,QAASL,KAAK4B,SAEhB,kBAAC,IAAD,CAAQzB,KAAK,UAAUE,QAAS,kBAAM,EAAKb,MAAMC,QAAQ,WAAzD,YAIF,kBAAC4B,EAAD,CACEmB,MAAO,CACLG,OAAQ,YACRD,QAAS,GACTD,WAAY,OACZG,UAAW,MAGZ5C,KAAKR,MAAMqD,gB,GAtDLvC,a,kBCVXwC,EAAUC,IAAVD,MAEFxB,EAAO,CAGX,CACEE,GAAI,EACJwB,KACE,wNAEFC,QAAS,gBACTC,OAAQ,gDAERC,KACE,gGACFC,SAAU,2BACVC,QAAS,2BAETC,SAAU,eACVC,UACE,gSAEFC,UAAW,eACXC,WAAY,oBACZC,WAAY,iFAEZC,YAAa,eACbC,aACE,qMAGJ,CACEpC,GAAI,EACJwB,KAAM,4HAENC,QAAS,gBACTC,OAAQ,aAERC,KACE,+FACFC,SAAU,yBACVC,QAAS,2BAETC,SAAU,eACVC,UAAW,uKAGb,CACE/B,GAAI,EACJwB,KACE,mUAEFC,QAAS,gBACTC,OAAQ,kCAERC,KACE,gGACFC,SAAU,0BACVC,QAAS,2BAETC,SAAU,eACVC,UACE,o+BACFM,WACE,idAEFL,UAAW,eACXC,WACE,izBACFC,WACE,kqBAEFI,QAAS,qBACTC,SAAU,yIAGZ,CACEvC,GAAI,EACJwB,KAAM,wJAENC,QAAS,gBACTC,OAAQ,qBAERC,KACE,iGACFC,SAAU,2BACVC,QAAS,2BAETC,SAAU,eACVC,UACE,mfAEFC,UAAW,eACXC,WAAY,SACZC,WACE,oUAEFI,QAAS,qBACTC,SACE,+NAIAC,EAAQ,CAEZ,CACExC,GAAI,EACJyC,MAAO,4EACPC,SAAU,CACRzC,MAAO,WACP0C,OAAQ,UACRC,OAAQ,WACRC,OAAQ,cAKRC,EAAM,CACV,CACE9C,GAAI,EACJwB,KAAM,qHAENC,QAAS,gBACTC,OAAQ,mBAERC,KACE,mGACFC,SAAU,8BACVC,QAAS,2BAETC,SAAU,eACVC,UACE,2NAEFO,QAAS,qBACTC,SAAU,0FAEZ,CACEvC,GAAI,EACJwB,KAAM,4HAENC,QAAS,gBACTC,OAAQ,2BAERC,KACE,kGACFC,SAAU,6BACVC,QAAS,2BAETC,SAAU,eACVC,UACE,qVACFM,WACE,kSACFU,WAAY,oFACZC,WACE,yXACFC,WACE,qNAEFjB,UAAW,eACXC,WAAY,QACZC,WACE,8NAEFI,QAAS,qBACTC,SAAU,0FAEZ,CACEvC,GAAI,EACJwB,KAAM,8GAENC,QAAS,gBACTC,OAAQ,qBACRwB,QAAS,qBAETvB,KACE,mGACFC,SAAU,8BACVC,QAAS,2BAETC,SAAU,eACVC,UAAW,8DACXM,WACE,mLACFU,WAAY,sCACZC,WAAY,oJACZC,WAAY,0JAEd,CACEjD,GAAI,EACJwB,KACE,oOAEFC,QAAS,gBACTC,OAAQ,sBAERC,KACE,yFACFC,SAAU,UACVC,QAAS,2BAETC,SAAU,eACVC,UACE,4bACFM,WACE,4TAEFL,UAAW,eACXC,WAAY,QACZC,WAAY,8DAEZI,QAAS,qBACTC,SAAU,wGAEZ,CACEvC,GAAI,EACJwB,KACE,yVAEFC,QAAS,gBACTC,OAAQ,4BAERC,KACE,0FACFC,SAAU,SACVC,QAAS,2BAETC,SAAU,eACVC,UAAW,yIAEXC,UAAW,eACXC,WAAY,QACZC,WAAY,mDAEZI,QAAS,qBACTC,SAAU,mKAEZ,CACEvC,GAAI,EACJwB,KACE,+MAEFC,QAAS,gBACTC,OAAQ,mCAERC,KACE,0FACFC,SAAU,SACVC,QAAS,2BAETC,SAAU,eACVC,UAAW,yIAEXC,UAAW,eACXC,WAAY,SACZC,WAAY,QAEZI,QAAS,qBACTC,SAAU,mIACVY,SAAU,uBACVC,SAAU,gDACVC,SAAU,oDAjJF,aAoJRrD,GAAI,EACJwB,KAAM,8JAENC,QAAS,gBACTC,OAAQ,+CAERC,KACE,mGACFC,SAAU,8BACVC,QAAS,2BAETC,SAAU,eACVC,UAAW,yIAEXC,UAAW,eACXC,WAAY,6GACZC,WACE,qTACFoB,WACE,oKAEFhB,QAAS,qBACTC,SAAU,mGAEVJ,YAAa,gBA5KL,cA8KN,qNAEJ,CACEnC,GAAI,EACJwB,KAAM,yHAENC,QAAS,gBACTC,OAAQ,yBAERC,KACE,mGACFC,SAAU,8BACVC,QAAS,2BAETC,SAAU,eACVC,UAAW,yIAEXC,UAAW,eACXC,WACE,sSAEFsB,SAAU,2BACVC,UACE,sTACFC,UAAW,8HAEXnB,QAAS,qBACTC,SAAU,iHAGRmB,EAAO,CACX,CACE1D,GAAI,EACJyC,MAAO,iCACPC,SAAU,CACRzC,MAAO,YACP0C,OAAQ,aACRC,OAAQ,aACRC,OAAQ,UACRc,OAAQ,eACRC,OAAQ,aACRC,OAAQ,oBACRC,OAAQ,eAMRvE,EAAM,CACV,CACES,GAAI,EACJwB,KACE,mQAEFC,QAAS,gBACTC,OAAQ,oCAERC,KACE,2GACFC,SAAU,4BACVC,QAAS,2BAETC,SAAU,eACVC,UACE,yVACFM,WACE,y3BACFU,WAAY,+FACZC,WACE,8TACFC,WACE,sKAEFjB,UAAW,eACXC,WAAY,wCACZC,WAAY,yCAEZI,QAAS,qBACTC,SAAU,kCAEZ,CACEvC,GAAI,EACJwB,KACE,sRAEFC,QAAS,gBACTC,OAAQ,2BAERC,KACE,8FACFC,SAAU,uCACVC,QAAS,2BAETC,SAAU,eACVC,UACE,mcAEFC,UAAW,eACXC,WACE,0JACFC,WAAY,yCAEZ6B,QAAS,eACTC,SACE,2KAEF1B,QAAS,qBACTC,SAAU,gJAEZ,CACEvC,GAAI,EACJwB,KACE,uNAEFC,QAAS,gBACTC,OAAQ,sCAERC,KACE,oGACFC,SAAU,qEACVC,QAAS,2BAETC,SAAU,eACVC,UACE,mLAEFC,UAAW,eACXC,WAAY,gGACZC,WACE,gdACFoB,WACE,+PACFW,WACE,sPAEF3B,QAAS,qBACTC,SAAU,0DAEZ,CACEvC,GAAI,EACJwB,KAAM,wHAENC,QAAS,gBACTC,OAAQ,gCAERC,KACE,kGACFC,SAAU,mBACVC,QAAS,2BAETC,SAAU,eACVC,UACE,6sBACFM,WAAY,sEAEZL,UAAW,eACXC,WAAY,WACZC,WACE,qKAEFI,QAAS,qBACTC,SAAU,mIAGR2B,EAAO,CACX,CACElE,GAAI,EACJyC,MAAO,iCACPC,SAAU,CACRzC,MAAO,WACP0C,OAAQ,mBACRC,OAAQ,qBACRC,OAAQ,oBAKRsB,EAAO,CACX,CACEnE,GAAI,EACJwB,KACE,qOAEFC,QAAS,gBACTC,OACE,sEAEFC,KACE,8FACFC,SAAU,OACVC,QAAS,2BAETC,SAAU,eACVC,UACE,+eAEFC,UAAW,eACXC,WAAY,8IAEZK,QAAS,qBACTC,SAAU,yCAEZ,CACEvC,GAAI,EACJwB,KACE,0NAEFC,QAAS,gBACTC,OAAQ,YAERC,KACE,8FACFC,SAAU,yBACVC,QAAS,2BAETC,SAAU,eACVC,UAAW,+HACXM,WACE,0iBACFU,WAAY,0HAEZT,QAAS,qBACTC,SAAU,2HAEZ,CACEvC,GAAI,EACJwB,KAAM,8LAENC,QAAS,gBACTC,OAAQ,oCAERC,KACE,iGACFC,SAAU,4BACVC,QAAS,2BAETC,SAAU,eACVC,UAAW,yEACXM,WACE,goBACFU,WACE,2QAEFT,QAAS,qBACTC,SAAU,uHAEVP,UAAW,eACXC,WAAY,+EAEd,CACEjC,GAAI,EACJwB,KACE,yPAEFC,QAAS,gBACTC,OAAQ,uCAERC,KACE,iGACFC,SAAU,4BACVC,QAAS,2BAETC,SAAU,eACVC,UAAW,uKACXM,WACE,ugBACFU,WACE,8kBAEFT,QAAS,qBACTC,SAAU,6HAEVP,UAAW,eACXC,WAAY,0HAGVmC,EAAQ,CACZ,CACEpE,GAAI,EACJyC,MAAO,iCACPC,SAAU,CACRzC,MAAO,WACP0C,OAAQ,QACRC,OAAQ,SACRC,OAAQ,gBAIC,aACb,OACE,6BAEE,6BACGL,EAAM9B,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,IAAD,CAAME,IAAKH,EAAKX,IAAMY,EAAO6B,MAAO9B,EAAK8B,OACvC,uBAAGhE,UAAU,sBAAsBkC,EAAK+B,SAASzC,OACjD,uBAAGxB,UAAU,sBAAsBkC,EAAK+B,SAASC,QACjD,uBAAGlE,UAAU,sBAAsBkC,EAAK+B,SAASE,QACjD,uBAAGnE,UAAU,sBAAsBkC,EAAK+B,SAASG,aAKzD,kBAAC,IAAD,CAAUwB,iBAAkB,CAAC,QAC1BvE,EAAKY,KAAI,SAACC,EAAMC,GACf,OAEE,kBAACU,EAAD,CAAOgD,OAAQ,4BAAK3D,EAAKa,MAAYV,IAAKH,EAAKX,IAAMY,GAEnD,4BAAKD,EAAKc,SACV,2BAAId,EAAKe,QACT,2BAAIf,EAAKuC,SAET,4BAAKvC,EAAKqB,WACV,2BAAIrB,EAAKsB,YACT,2BAAItB,EAAKuB,YAET,4BAAKvB,EAAK2B,SACV,2BAAI3B,EAAK4B,UAET,4BAAK5B,EAAKmB,UACV,2BAAInB,EAAKoB,WACT,2BAAIpB,EAAK0B,YAET,4BAAK1B,EAAKwB,aACV,2BAAIxB,EAAKyB,cAET,2BAAIzB,EAAK4D,SACT,2BAAI5D,EAAK6D,UACT,2BAAI7D,EAAK8D,UAET,4BAAK9D,EAAKkB,SACT,uBAAG6C,KAAM/D,EAAKgB,MAAOhB,EAAKiB,eAMnC,6BACG8B,EAAKhD,KAAI,SAACC,EAAMC,GACf,OACE,kBAAC,IAAD,CAAME,IAAKH,EAAKX,IAAMY,EAAO6B,MAAO9B,EAAK8B,OACvC,uBAAGhE,UAAU,sBAAsBkC,EAAK+B,SAASzC,OACjD,uBAAGxB,UAAU,sBAAsBkC,EAAK+B,SAASC,QACjD,uBAAGlE,UAAU,sBAAsBkC,EAAK+B,SAASE,QACjD,uBAAGnE,UAAU,sBAAsBkC,EAAK+B,SAASG,QACjD,uBAAGpE,UAAU,sBAAsBkC,EAAK+B,SAASiB,QACjD,uBAAGlF,UAAU,sBAAsBkC,EAAK+B,SAASkB,QACjD,uBAAGnF,UAAU,sBAAsBkC,EAAK+B,SAASmB,QACjD,uBAAGpF,UAAU,sBAAsBkC,EAAK+B,SAASoB,aAKzD,kBAAC,IAAD,CAAUO,iBAAkB,CAAC,QAC1BvB,EAAIpC,KAAI,SAACC,EAAMC,GACd,OAEE,kBAACU,EAAD,CAAOgD,OAAQ,4BAAK3D,EAAKa,MAAYV,IAAKH,EAAKX,IAAMY,GAEnD,4BAAKD,EAAKc,SACV,2BAAId,EAAKe,QACT,2BAAIf,EAAKuC,SAET,4BAAKvC,EAAKqB,WACV,2BAAIrB,EAAKsB,YACT,2BAAItB,EAAKuB,YACT,2BAAIvB,EAAK2C,YAET,4BAAK3C,EAAK2B,SACV,2BAAI3B,EAAK4B,UACT,2BAAI5B,EAAKwC,UACT,2BAAIxC,EAAKyC,UACT,2BAAIzC,EAAK0C,UAET,4BAAK1C,EAAK4C,UACV,2BAAI5C,EAAK6C,WACT,2BAAI7C,EAAK8C,WAET,4BAAK9C,EAAKmB,UACV,2BAAInB,EAAKoB,WACT,2BAAIpB,EAAK0B,YACT,2BAAI1B,EAAKoC,YACT,2BAAIpC,EAAKqC,YACT,2BAAIrC,EAAKsC,YAET,4BAAKtC,EAAKwB,aACV,2BAAIxB,EAAKyB,cAET,2BAAIzB,EAAK4D,SACT,2BAAI5D,EAAK6D,UACT,2BAAI7D,EAAK8D,UAET,4BAAK9D,EAAKkB,SACT,uBAAG6C,KAAM/D,EAAKgB,MAAOhB,EAAKiB,eAMnC,6BACGsC,EAAKxD,KAAI,SAACC,EAAMC,GACf,OACE,kBAAC,IAAD,CAAME,IAAKH,EAAKX,IAAMY,EAAO6B,MAAO9B,EAAK8B,OACvC,uBAAGhE,UAAU,sBAAsBkC,EAAK+B,SAASzC,OACjD,uBAAGxB,UAAU,sBAAsBkC,EAAK+B,SAASC,QACjD,uBAAGlE,UAAU,sBAAsBkC,EAAK+B,SAASE,QACjD,uBAAGnE,UAAU,sBAAsBkC,EAAK+B,SAASG,aAMzD,kBAAC,IAAD,CAAUwB,iBAAkB,CAAC,QAC1B9E,EAAImB,KAAI,SAACC,EAAMC,GACd,OAEE,kBAACU,EAAD,CAAOgD,OAAQ,4BAAK3D,EAAKa,MAAYV,IAAKH,EAAKX,IAAMY,GAEnD,4BAAKD,EAAKc,SACV,2BAAId,EAAKe,QACT,2BAAIf,EAAKuC,SAET,4BAAKvC,EAAKqB,WACV,2BAAIrB,EAAKsB,YACT,2BAAItB,EAAKuB,YACT,2BAAIvB,EAAK2C,YACT,2BAAI3C,EAAKsD,YAET,4BAAKtD,EAAK2B,SACV,2BAAI3B,EAAK4B,UACT,2BAAI5B,EAAKwC,UACT,2BAAIxC,EAAKyC,UACT,2BAAIzC,EAAK0C,UAET,4BAAK1C,EAAK4C,UACV,2BAAI5C,EAAK6C,WACT,2BAAI7C,EAAK8C,WAET,4BAAK9C,EAAKmB,UACV,2BAAInB,EAAKoB,WACT,2BAAIpB,EAAK0B,YACT,2BAAI1B,EAAKoC,YACT,2BAAIpC,EAAKqC,YACT,2BAAIrC,EAAKsC,YAET,4BAAKtC,EAAKoD,SACV,2BAAIpD,EAAKqD,UAET,4BAAKrD,EAAKwB,aACV,2BAAIxB,EAAKyB,cAET,2BAAIzB,EAAK4D,SACT,2BAAI5D,EAAK6D,UACT,2BAAI7D,EAAK8D,UAET,4BAAK9D,EAAKkB,SACT,uBAAG6C,KAAM/D,EAAKgB,MAAOhB,EAAKiB,eAKnC,6BACGwC,EAAM1D,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,IAAD,CAAME,IAAKH,EAAKX,IAAMY,EAAO6B,MAAO9B,EAAK8B,OACvC,uBAAGhE,UAAU,sBAAsBkC,EAAK+B,SAASzC,OACjD,uBAAGxB,UAAU,sBAAsBkC,EAAK+B,SAASC,QACjD,uBAAGlE,UAAU,sBAAsBkC,EAAK+B,SAASE,QACjD,uBAAGnE,UAAU,sBAAsBkC,EAAK+B,SAASG,aAKzD,kBAAC,IAAD,CAAUwB,iBAAkB,CAAC,QAC1BF,EAAKzD,KAAI,SAACC,EAAMC,GACf,OAEE,kBAACU,EAAD,CAAOgD,OAAQ,4BAAK3D,EAAKa,MAAYV,IAAKH,EAAKX,IAAMY,GAEnD,4BAAKD,EAAKc,SACV,2BAAId,EAAKe,QACT,2BAAIf,EAAKuC,SAET,4BAAKvC,EAAKqB,WACV,2BAAIrB,EAAKsB,YACT,2BAAItB,EAAKuB,YACT,2BAAIvB,EAAK2C,YACT,2BAAI3C,EAAKsD,YAET,4BAAKtD,EAAK2B,SACV,2BAAI3B,EAAK4B,UACT,2BAAI5B,EAAKwC,UACT,2BAAIxC,EAAKyC,UACT,2BAAIzC,EAAK0C,UAET,4BAAK1C,EAAK4C,UACV,2BAAI5C,EAAK6C,WACT,2BAAI7C,EAAK8C,WAET,4BAAK9C,EAAKmB,UACV,2BAAInB,EAAKoB,WACT,2BAAIpB,EAAK0B,YACT,2BAAI1B,EAAKoC,YACT,2BAAIpC,EAAKqC,YACT,2BAAIrC,EAAKsC,YAET,4BAAKtC,EAAKoD,SACV,2BAAIpD,EAAKqD,UAET,4BAAKrD,EAAKwB,aACV,2BAAIxB,EAAKyB,cAET,2BAAIzB,EAAK4D,SACT,2BAAI5D,EAAK6D,UACT,2BAAI7D,EAAK8D,UAET,4BAAK9D,EAAKkB,SACT,uBAAG6C,KAAM/D,EAAKgB,MAAOhB,EAAKiB,iB,SC5yBnC+C,EAAU,CACd,CACElC,MAAO,2BACPmC,UAAW,OACXC,OAAQ,SAAArD,GAAI,OACV,uBAAGkD,KAAK,mDAAmDlD,KAG/D,CACEiB,MAAO,2BACPhE,UAAW,eACXmG,UAAW,SAEb,CACEnC,MAAO,eACPmC,UAAW,YAIT9E,EAAO,CACX,CACEgB,IAAK,IACLxD,KAAM,MACNwH,MAAO,WACPC,QACE,0LAEJ,CACEjE,IAAK,IACLxD,KAAM,MACNwH,MAAO,sBACPC,QAAS,sJAEX,CACEjE,IAAK,IACLxD,KAAM,MACNwH,MAAO,KACPC,QAAS,6HAEX,CACEjE,IAAK,IACLxD,KAAM,MACNwH,MAAO,UACPC,QAAS,2HAEX,CACEjE,IAAK,IACLxD,KAAM,MACNwH,MAAO,WACPC,QAAS,8FAEX,CACEjE,IAAK,IACLxD,KAAM,MACNwH,MAAO,gCACPC,QACE,0OAEJ,CACEjE,IAAK,IACLxD,KAAM,MACNwH,MAAO,aACPC,QACE,uWAEJ,CACEjE,IAAK,IACLxD,KAAM,MACNwH,MAAO,gBACPC,QACE,wQAEJ,CACEjE,IAAK,IACLxD,KAAM,MACNwH,MAAO,oBACPC,QACE,0KAEJ,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,mBACPC,QACE,4VAEJ,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,oBACPC,QACE,8NAEJ,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,QACPC,QACE,8kCAEJ,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,YACPC,QACE,wRAEJ,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,eACPC,QACE,obAEJ,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,YACPC,QACE,sLAEJ,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,qBACPC,QACE,40BAEJ,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,cACPC,QAAS,0DAEX,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,eACPC,QACE,6ZAEJ,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,YACPC,QACE,kRAEJ,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,YACPC,QAAS,8IAEX,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,qBACPC,QACE,2LAEJ,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,mBACPC,QACE,sNAEJ,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,gCACPC,QAAS,qKAEX,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,kBACPC,QACE,8QAEJ,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,WACPC,QACE,uOAEJ,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,OACPC,QACE,0eAEJ,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,kBACPC,QACE,oKAEJ,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,sBACPC,QAAS,8HAEX,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,2BACPC,QACE,2VAEJ,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,uBACPC,QAAS,mDAEX,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,kCACPC,QAAS,+IAEX,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,wBACPC,QAAS,oJAEX,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,kBACPC,QACE,qOAEJ,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,cACPC,QACE,gQAEJ,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,sBACPC,QACE,2VAEJ,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,kBACPC,QACE,oOAEJ,CACEjE,IAAK,KACLxD,KAAM,MACNwH,MAAO,6BACPC,QAAS,mIAIE,aACb,OACE,6BACE,kBAAC,IAAD,CAAMtC,MAAM,uCAASuC,UAAU,EAAOhE,MAAO,CAAEiE,MAAO,MACpD,oEACA,2EACA,6DACA,uEACA,8DACA,2FACA,oEACA,uFACA,yEAEF,sDACA,kBAAC,IAAD,CACExG,UAAU,kBACVkG,QAASA,EACTO,WAAYpF,EACZkF,UAAQ,EACRvC,MAAO,iBAAM,Q,gBChSf0C,EAAM,CACV,CACEnF,GAAG,EACHwB,KAAK,gEACTvB,MAAM,kCACNmF,OAAO,aACPzC,OAAO,UACPC,OAAO,eAEL,CACE5C,GAAG,EACHwB,KAAK,iCACTvB,MAAM,2CACNmF,OAAO,4CACPxC,OAAO,4CACPD,OAAO,kEAEL,CACE3C,GAAG,EACHwB,KAAK,uCACLvB,MAAM,2GACNmF,OAAO,+FACPzC,OAAO,uDACPC,OAAO,6CAET,CACE5C,GAAG,EACHwB,KAAK,yFACTvB,MAAM,yDACNmF,OAAO,kFAEL,CACEpF,GAAG,EACHwB,KAAK,iCACTvB,MAAM,iBACNmF,OAAO,mBAGQ,aACb,OACE,yBAAKpE,MAAO,CAAEC,WAAY,UAAWC,QAAS,SAC9C,kBAAC,IAAD,CAAKmE,OAAQ,IAGVF,EAAIzE,KAAI,SAACC,EAAKC,GACZ,OACG,kBAAC,IAAD,CAAK0E,KAAM,GACf,kBAAC,IAAD,CAAM7C,MAAO9B,EAAKa,KAAMwD,UAAU,GAClC,2BAAIrE,EAAKV,OACT,2BAAIU,EAAKyE,QACT,2BAAIzE,EAAKgC,QACT,2BAAIhC,EAAKiC,gB,SCpDTtB,EAAUC,IAAVD,MAEFiE,EAAW,CAAC,aAEdvF,GAAI,EACJyC,MACE,8XACFX,SAAU,eACV0D,UACE,4xCACFC,KAAM,eACNC,MACE,8RACFC,MACE,8TACFpB,QAAS,eACTC,SAAU,oDAdG,iRA2BF,aACb,OACE,6BACE,kBAAC,IAAD,CAAUH,iBAAkB,CAAC,QAC1BkB,EAAS7E,KAAI,SAACC,EAAMC,GACnB,OACE,kBAAC,EAAD,CAAO0D,OAAO,iCAAQxD,IAAKH,EAAKX,IAAMY,GACpC,2BAAID,EAAK8B,OAET,4BAAK9B,EAAKmB,UACV,2BAAInB,EAAK6E,WAET,4BAAK7E,EAAK8E,MACV,2BAAI9E,EAAK+E,OACT,2BAAI/E,EAAKgF,OAET,4BAAKhF,EAAK4D,SACV,2BAAI5D,EAAK6D,UAET,yBACEoB,IAAI,2IACJC,IAAI,UAQd,wBAAI7E,MAAO,CAAEG,OAAQ,WAArB,8CACA,kBAAC,IAAD,KACE,uDACA,8QAIA,sIACA,kBAAC,IAAD,KACE,yCACA,yCACA,0CAGF,yFACA,kBAAC,IAAD,KACE,0DAEF,mDACA,uGACA,kBAAC,IAAD,KACE,qDACA,0CACA,wEACA,oFAEF,6WAIA,kBAAC,IAAD,KACE,yDACA,qCACA,oDACA,yCAEF,sPAGA,qRAGA,kBAAC,IAAD,KACE,+FAKA,oDAEF,kLAGF,wBAAIH,MAAO,CAAEG,OAAQ,WAArB,8CACA,kBAAC,IAAD,KACE,iJACA,kBAAC,IAAD,KACE,6EACA,2CACA,4CAEF,qdAGA,kBAAC,IAAD,KACE,6EACA,2CACA,2CACA,wEACA,gDAEF,mDACA,6GACA,kBAAC,IAAD,KACE,kDACA,qCACA,uDACA,qCACA,qCACA,mDACA,sCAEF,sKACA,kBAAC,IAAD,KACE,4DACA,qCACA,uDACA,yCAEF,kSAGA,kDACA,8MACA,kBAAC,IAAD,KACE,gEACA,4CACA,qCACA,4DAEF,meAKA,kBAAC,IAAD,KACE,gEACA,qCACA,+CAEF,iVAGA,+SAGA,kBAAC,IAAD,KACE,qDACA,6CACA,2CAEF,kMAGF,wBAAIH,MAAO,CAAEG,OAAQ,WAArB,qDACA,kBAAC,IAAD,KACE,uPAGA,kBAAC,IAAD,KACE,+DACA,uCACA,uCACA,uCACA,uCACA,wCAEF,mNACA,kBAAC,IAAD,KACE,4DACA,yCAIJ,wBAAIH,MAAO,CAAEG,OAAQ,WAArB,uEACA,kBAAC,IAAD,KACE,uMACA,kBAAC,IAAD,KACE,uDACA,sEACA,wDACA,wEAEF,wOAGA,0ZAGA,kBAAC,IAAD,KACE,wEACA,qEAIJ,wBAAIH,MAAO,CAAEG,OAAQ,WAArB,2DACA,kBAAC,IAAD,KACE,yHACA,kBAAC,IAAD,KACE,wEAGA,iDAEF,ocAGA,qFACA,kBAAC,IAAD,KACE,uEACA,2CAEF,+HACA,kBAAC,IAAD,KACE,kFACA,4DACA,sDACA,mDACA,gDACA,4BACA,6BAEF,yVAGA,4IACA,kBAAC,IAAD,KACE,0FAEA,4DACA,8DACA,mEACA,iDAEF,+TAGA,uHACA,kBAAC,IAAD,KACE,uEACA,mDAGJ,kBAAC,IAAD,KACE,wBAAIH,MAAO,CAAEG,OAAQ,WAArB,iCChRFrB,EAAO,CACX,gGACA,uEACA,4KACA,qCACA,6DAEI0C,EAAQ,CACZ,iGACA,uEACA,qIAHY,mCAKZ,yDAEIsD,EAAQ,CACZ,uCACA,2BACA,sBACA,4EACA,KAEIC,EAAQ,CACZ,qEACA,sHACA,4JAEIC,EAAQ,CACZ,uCACA,2BAFY,2CAIZ,gFAEIC,EAAQ,CACZ,6FACA,6EAFY,yKAIZ,gHACA,2GACA,iGACA,qBACA,wDACA,2CACA,4CACA,uCACA,2DACA,6FAEIC,GAAQ,CACZ,+HACA,+DAFY,+EAIZ,2CACA,6DACA,sIACA,yFACA,2FACA,oGAEIC,GAAQ,CACZ,gDACA,iCAFY,iFAIZ,8CAEIC,GAAQ,CACZ,iBACA,qDACA,8IACA,iCACA,kEACA,4DACA,UACA,iBAEa,cACb,OACE,6BACE,wBAAIpF,MAAO,CAAEG,OAAQ,WAArB,OACA,kBAAC,IAAD,CACEkF,KAAK,QACL/B,OAAQ,+DACRU,UAAQ,EACRE,WAAYpF,EACZwG,WAAY,SAAA3F,GAAI,OAAI,kBAAC,IAAKE,KAAN,KAAYF,MAElC,kBAAC,IAAD,CACE0F,KAAK,QACL/B,OAAQ,+DACRU,UAAQ,EACRE,WAAY1C,EACZ8D,WAAY,SAAA3F,GAAI,OAAI,kBAAC,IAAKE,KAAN,KAAYF,MAElC,kBAAC,IAAD,CACE0F,KAAK,QACL/B,OAAQ,qEACRU,UAAQ,EACRE,WAAYY,EACZQ,WAAY,SAAA3F,GAAI,OAAI,kBAAC,IAAKE,KAAN,KAAYF,MAElC,kBAAC,IAAD,CACE0F,KAAK,QACL/B,OAAQ,mGACRU,UAAQ,EACRE,WAAYa,EACZO,WAAY,SAAA3F,GAAI,OAAI,kBAAC,IAAKE,KAAN,KAAYF,MAElC,kBAAC,IAAD,CACE0F,KAAK,QACL/B,OAAQ,mGACRU,UAAQ,EACRE,WAAYc,EACZM,WAAY,SAAA3F,GAAI,OAAI,kBAAC,IAAKE,KAAN,KAAYF,MAElC,kBAAC,IAAD,CACE0F,KAAK,QACL/B,OAAQ,yDACRU,UAAQ,EACRE,WAAYe,EACZK,WAAY,SAAA3F,GAAI,OAAI,kBAAC,IAAKE,KAAN,KAAYF,MAElC,kBAAC,IAAD,CACE0F,KAAK,QACL/B,OAAQ,iFACRU,UAAQ,EACRE,WAAYgB,GACZI,WAAY,SAAA3F,GAAI,OAAI,kBAAC,IAAKE,KAAN,KAAYF,MAElC,kBAAC,IAAD,CACE0F,KAAK,QACL/B,OAAQ,qEACRU,UAAQ,EACRE,WAAYiB,GACZG,WAAY,SAAA3F,GAAI,OAAI,kBAAC,IAAKE,KAAN,KAAYF,MAElC,kBAAC,IAAD,CACE0F,KAAK,QACL/B,OAAQ,mGACRU,UAAQ,EACRE,WAAYkB,GACZE,WAAY,SAAA3F,GAAI,OAAI,kBAAC,IAAKE,KAAN,KAAYF,QC3IlCb,GAAO,CACX,8dACA,8lBACA,sEACA,4wBACA,+iCACA,oMACA,uZACA,unBACA,wNACA,2BACA,uIACA,kFACA,IAGa,cACb,OACE,6BACE,kBAAC,IAAD,CACEuG,KAAK,QACL/B,OAAQ,2DACRU,UAAQ,EACRE,WAAYpF,GACZwG,WAAY,SAAA3F,GAAI,OAAI,kBAAC,IAAKE,KAAN,KAAYF,KAExC,kBAAC,IAAD,KACE,sFACI,gDACA,+EACA,8CACA,yCACA,6CACA,iCACA,sCCtBe4F,G,YACnB,aAAe,IAAD,8BACZ,+CAWFxF,SAAW,SAAAd,GACTuG,OAAOC,SAASC,KAAOzG,EACvB,EAAK5C,SAAS,CACZsJ,MAAO1G,KAfG,EAmBdhC,QAAU,SAAA6B,GACR0G,OAAOC,SAASC,KAAO5G,GAlBvB,EAAKrC,MAAQ,CACXkJ,MAAOH,OAAOC,SAASC,KAAKE,MAAM,IAAM,YAG1CJ,OAAOK,aAAe,WACpB,EAAKxJ,SAAS,CACZsJ,MAAOH,OAAOC,SAASC,KAAKE,MAAM,MAR1B,E,sEAuBZ,IAAIE,EAAM,GACV,OAAQtI,KAAKf,MAAMkJ,OACjB,IAAK,WACHG,EAAM,kBAAC,EAAD,CAAU7I,QAASO,KAAKP,UAC9B,MACF,IAAK,QACH6I,EAAM,kBAAC,EAAD,CAAO7I,QAASO,KAAKP,UAC3B,MACF,IAAK,UACH6I,EAAM,kBAAC,EAAD,MACN,MACF,IAAK,YACHA,EAAM,kBAAC,EAAD,MACN,MACF,IAAK,WACHA,EAAM,kBAAC,EAAD,MACN,MACF,IAAK,aACHA,EAAM,kBAACC,EAAD,MACN,MACF,IAAK,WACHD,EAAM,kBAACE,GAAD,MACN,MACF,IAAK,UACHF,EAAM,kBAAC,GAAD,MAGV,OACE,6BACuB,YAApBtI,KAAKf,MAAMkJ,MACV,kBAAC,EAAD,CAAU1I,QAASO,KAAKP,UACF,SAApBO,KAAKf,MAAMkJ,MACb,kBAAC,EAAD,CAAO1I,QAASO,KAAKP,UAErB,kBAAC,EAAD,CAAMA,QAASO,KAAKP,QAAS8C,SAAUvC,KAAKuC,UAAW+F,Q,GA1D9BhI,aCFfmI,QACW,cAA7BT,OAAOC,SAASS,UAEe,UAA7BV,OAAOC,SAASS,UAEhBV,OAAOC,SAASS,SAASC,MACvB,2DCXNC,IAASvC,OAAO,kBAAC,GAAD,MAASwC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.70a41aa9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './index.scss';\r\nimport { Button } from 'antd';\r\n\r\nexport default class Login extends Component {\r\n  constructor() {\r\n    super();\r\n    let users = JSON.parse(sessionStorage.getItem('user')) || '';\r\n    this.state = {\r\n      user: users.user,\r\n      pass: '',\r\n      usfo: users.user,\r\n      pwfo: users.pass\r\n    };\r\n  }\r\n  setchange = ({ target }) => {\r\n    this.setState({\r\n      [target.name]: target.value\r\n    });\r\n  };\r\n  componentDidMount() {\r\n    if (!sessionStorage.getItem('user')) {\r\n      alert('您并没有注册记录，请返回注册,(2秒后自动返回)');\r\n      setTimeout(() => {\r\n        this.props.getdata('Register');\r\n      }, 2000);\r\n\r\n      return false;\r\n    }\r\n  }\r\n  render() {\r\n    const { user, pass } = this.state;\r\n    return (\r\n      <div className=\"zrb-max-login\">\r\n        <label>\r\n          <h1>Login...</h1>\r\n        </label>\r\n        <form className=\"\" autoComplete=\"off\">\r\n          <label>\r\n            账号：\r\n            <input\r\n              type=\"text\"\r\n              name=\"user\"\r\n              value={user}\r\n              onChange={this.setchange}\r\n            />\r\n          </label>\r\n          <label>\r\n            密码：\r\n            <input\r\n              type=\"text\"\r\n              name=\"pass\"\r\n              value={pass}\r\n              onChange={this.setchange}\r\n            />\r\n          </label>\r\n          <label>\r\n            <Button\r\n              type=\"primary\"\r\n              className=\"ant-btn-primary\"\r\n              onClick={this.onlogin}\r\n            >\r\n              登陆\r\n            </Button>\r\n            <Button\r\n              className=\"ant-btn\"\r\n              onClick={() => this.props.getdata('Register')}\r\n            >\r\n              注册\r\n            </Button>\r\n          </label>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n  login = () => {\r\n    const { usfo, pwfo } = this.state;\r\n    if (this.state.user !== usfo) {\r\n      alert('用户名错误');\r\n      return false;\r\n    } else if (this.state.pass !== pwfo) {\r\n      alert('密码错误');\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n  onlogin = () => {\r\n    if (this.login()) {\r\n      this.props.getdata('Summary');\r\n    }\r\n  };\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Button } from 'antd';\r\nimport './index.scss';\r\n\r\nexport default class Register extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      user: '',\r\n      pass: '',\r\n      ispa: '',\r\n      email: ''\r\n    };\r\n  }\r\n  //改变input值\r\n  setchange = ({ target }) => {\r\n    this.setState({\r\n      [target.name]: target.value\r\n    });\r\n  };\r\n  render() {\r\n    const { user, pass, ispa, email } = this.state;\r\n    return (\r\n      <div className=\"zrb-max-register\">\r\n        <form autoComplete=\"off\">\r\n          <label>\r\n            账号：\r\n            <input\r\n              type=\"text\"\r\n              name=\"user\"\r\n              value={user}\r\n              onChange={this.setchange}\r\n            />\r\n          </label>\r\n          <label>\r\n            密码：\r\n            <input\r\n              type=\"password\"\r\n              name=\"pass\"\r\n              value={pass}\r\n              onChange={this.setchange}\r\n            />\r\n          </label>\r\n          <label>\r\n            密码：\r\n            <input\r\n              type=\"password\"\r\n              name=\"ispa\"\r\n              value={ispa}\r\n              onChange={this.setchange}\r\n            />\r\n          </label>\r\n          <label>\r\n            邮箱：\r\n            <input\r\n              type=\"text\"\r\n              name=\"email\"\r\n              value={email}\r\n              onChange={this.setchange}\r\n            />\r\n          </label>\r\n          <label>\r\n            <Button type=\"primary\" onClick={this.onregister}>\r\n              注册\r\n            </Button>\r\n            <Button type=\"primary\" onClick={() => this.props.getdata('Login')}>\r\n              登陆\r\n            </Button>\r\n          </label>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n  //验证\r\n  register = () => {\r\n    const { user, pass, ispa, email } = this.state;\r\n    if (!user.trim() || user.length < 6) {\r\n      alert('用户名不能为空,且长度不小于6位');\r\n      return false;\r\n    } else if (!pass.trim() || !/^(\\w){6,20}$/.test(pass)) {\r\n      alert('密码不能为空,且必须是6-20个字母、数字、下划线');\r\n      return false;\r\n    } else if (!(pass === ispa)) {\r\n      alert('两次密码不一致，请检查密码');\r\n      return false;\r\n    } else if (\r\n      !email.trim() ||\r\n      !/^([a-zA-Z]|[0-9])(\\w|\\-)+@[a-zA-Z0-9]+\\.([a-zA-Z]{2,4})$/.test(email)\r\n    ) {\r\n      alert('邮箱格式不正确');\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n  //如果判断成功后进入登陆页面\r\n  onregister = () => {\r\n    if (this.register()) {\r\n      let obj = {};\r\n      obj.user = this.state.user;\r\n      obj.pass = this.state.pass;\r\n      sessionStorage.setItem('user', JSON.stringify(obj));\r\n      this.props.getdata('Login');\r\n    }\r\n  };\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Layout, Menu, Icon, Button } from 'antd';\r\nimport './style/index.scss';\r\n\r\nconst { Header, Sider, Content } = Layout;\r\n\r\nconst data = [\r\n  { iconType: 'pie-chart', id: 'Summary', label: '常用知识技巧总结' },\r\n  { iconType: 'box-plot', id: 'Knowledge', label: '知识点汇总' },\r\n  { iconType: 'fund', id: 'Jssenior', label: 'js' },\r\n  { iconType: 'dot-chart', id: 'Es6grammar', label: 'ES6语法' },\r\n  { iconType: 'sliders', id: 'Vueframe', label: 'VUE框架' },\r\n  { iconType: 'bar-chart', id: 'Pramise', label: 'pramise' }\r\n];\r\nclass Home extends Component {\r\n  state = {\r\n    collapsed: false\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <Sider\r\n          trigger={null}\r\n          collapsible\r\n          collapsed={this.state.collapsed}\r\n          className=\"ant-layout-sider-children \"\r\n        >\r\n          <div className=\"logo\" />\r\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['key']}>\r\n            {data.map((item, index) => {\r\n              return (\r\n                <Menu.Item\r\n                  key={item.id || index}\r\n                  onClick={() => this.props.onchange(item.id)}\r\n                >\r\n                  <Icon type={item.iconType} />\r\n                  <span>{item.label}</span>\r\n                </Menu.Item>\r\n              );\r\n            })}\r\n          </Menu>\r\n        </Sider>\r\n        <Layout>\r\n          <Header style={{ background: 'blue', padding: 0 }}>\r\n            <Icon\r\n              className=\"trigger\"\r\n              type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\r\n              onClick={this.toggle}\r\n            />\r\n            <Button type=\"primary\" onClick={() => this.props.getdata('Login')}>\r\n              Primary\r\n            </Button>\r\n          </Header>\r\n          <Content\r\n            style={{\r\n              margin: '24px 16px',\r\n              padding: 24,\r\n              background: '#fff',\r\n              minHeight: 280\r\n            }}\r\n          >\r\n            {this.props.children}\r\n          </Content>\r\n        </Layout>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\nexport default Home;\r\n","import React from 'react';\r\nimport { Collapse } from 'antd';\r\nimport { Card } from 'antd';\r\nimport './style/index.scss';\r\nconst { Panel } = Collapse;\r\n//字符串的方法\r\nconst data = [\r\n  //字符串的增删改查方法\r\n  //concat方法\r\n  {\r\n    id: 1,\r\n    text:\r\n      'concat() 方法将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'str.concat(string2, string3[, ..., stringN]).',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat',\r\n    relevant: 'Array.prototype.concat()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes:\r\n      'concat 方法将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。 concat 方法并不影响原字符串。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1: 'string2...stringN',\r\n    parameter2: '和原字符串连接的多个字符串',\r\n    //性能\r\n    performance: '性能',\r\n    performance1:\r\n      '强烈建议使用 赋值操作符（+, +=）代替 concat 方法。参看 性能测试（perfomance test）。 '\r\n  },\r\n  //trim() 方法\r\n  {\r\n    id: 2,\r\n    text: 'trim() 方法会从一个字符串的两端删除空白字符。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'str.trim()',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim',\r\n    relevant: 'Array.prototype.trim()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes: 'trim() 方法并不影响原字符串本身，它返回的是一个新的字符串。'\r\n  },\r\n  //split()方法\r\n  {\r\n    id: 3,\r\n    text:\r\n      'split() 方法使用指定的分隔符字符串将一个String对象分割成字符串数组，以将字符串分隔为子字符串，以确定每个拆分的位置。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'str.split([separator[, limit]])',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split',\r\n    relevant: 'Array.prototype.split()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes:\r\n      '找到分隔符后，将其从字符串中删除，并将子字符串的数组返回。如果没有找到或者省略了分隔符，则该数组包含一个由整个字符串组成的元素。如果分隔符为空字符串，则将str转换为字符数组。如果分隔符出现在字符串的开始或结尾，或两者都分开，分别以空字符串开头，结尾或两者开始和结束。因此，如果字符串仅由一个分隔符实例组成，则该数组由两个空字符串组成。',\r\n    describes2:\r\n      '如果分隔符是包含捕获括号的正则表达式，则每次分隔符匹配时，捕获括号的结果（包括任何未定义的结果）将被拼接到输出数组中。但是，并不是所有浏览器都支持此功能。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1:\r\n      'separator :指定表示每个拆分应发生的点的字符串。separator 可以是一个字符串或正则表达式。 如果纯文本分隔符包含多个字符，则必须找到整个字符串来表示分割点。如果在str中省略或不出现分隔符，则返回的数组包含一个由整个字符串组成的元素。如果分隔符为空字符串，则将str原字符串中每个字符的数组形式返回。',\r\n    parameter2:\r\n      'limit一个整数，限定返回的分割片段数量。当提供此参数时，split 方法会在指定分隔符的每次出现时分割该字符串，但在限制条目已放入数组时停止。如果在达到指定限制之前达到字符串的末尾，它可能仍然包含少于限制的条目。新数组中不返回剩下的文本。',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '返回源字符串以分隔符出现位置分隔而成的一个 Array '\r\n  },\r\n  //search() 方法\r\n  {\r\n    id: 4,\r\n    text: 'search() 方法执行正则表达式和 String 对象之间的一个搜索匹配。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'str.search(regexp)',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search',\r\n    relevant: 'Array.prototype.search()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes:\r\n      '当你想要知道字符串中是否存在某个模式（pattern）时可使用 search()，类似于正则表达式的 test() 方法。当要了解更多匹配信息时，可使用 match()（但会更慢一些），该方法类似于正则表达式的 exec() 方法。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1: 'regexp',\r\n    parameter2:\r\n      '一个正则表达式（regular expression）对象。如果传入一个非正则表达式对象 obj，则会使用 new RegExp(obj) 隐式地将其转换为正则表达式对象。',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1:\r\n      '如果匹配成功，则 search() 返回正则表达式在字符串中首次匹配项的索引;否则，返回 -1。'\r\n  }\r\n];\r\n\r\nconst data2 = [\r\n  //字符串的增删改查方法\r\n  {\r\n    id: 1,\r\n    title: '字符串的 ·增 删 改 查· 方法',\r\n    chidlren: {\r\n      label: 'concat()',\r\n      label2: 'trim() ',\r\n      label3: 'split() ',\r\n      label4: 'search()'\r\n    }\r\n  }\r\n];\r\n//数组的方法\r\nconst num = [\r\n  {\r\n    id: 1,\r\n    text: 'valueOf() 方法返回一个被 Number 对象包装的原始值。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'numObj.valueOf()',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toSource',\r\n    relevant: 'Number.prototype.toSource()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes:\r\n      '该方法通常是由 JavaScript 引擎在内部隐式调用的，而不是由用户在代码中显式调用的。',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '表示指定 Number 对象的原始值的数字'\r\n  },\r\n  {\r\n    id: 2,\r\n    text: 'toString() 方法返回指定 Number 对象的字符串表示形式。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'numObj.toString([radix])',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed',\r\n    relevant: 'Number.prototype.toFixed()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes:\r\n      'Number 对象覆盖了 Object 对象上的 toString() 方法，它不是继承的 Object.prototype.toString()。对于 Number 对象，toString() 方法以指定的基数返回该对象的字符串表示。',\r\n    describes2:\r\n      '如果转换的基数大于10，则会使用字母来表示大于9的数字，比如基数为16的情况，则使用a到f的字母来表示10到15。',\r\n    describes3: '如果基数没有指定，则使用 10。',\r\n    describes4:\r\n      '如果对象是负数，则会保留负号。即使radix是2时也是如此：返回的字符串包含一个负号（-）前缀和正数的二进制表示，不是 数值的二进制补码。',\r\n    describes5:\r\n      '进行数字到字符串的转换时，建议用小括号将要转换的目标括起来，防止出错。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1: 'radix',\r\n    parameter2:\r\n      '指定要用于数字到字符串的转换的基数(从2到36)。如果未指定 radix 参数，则默认值为 10。',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '表示指定 Number 对象的原始值的数字'\r\n  },\r\n  {\r\n    id: 3,\r\n    text: 'toSource() 方法返回该对象源码的字符串表示。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'numObj.toSource();',\r\n    method2: 'Number.toSource();',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource',\r\n    relevant: 'Object.prototype.toSource()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes: 'toSource() 方法返回下列值：',\r\n    describes2:\r\n      '对于内置 Number 对象， toSource() 返回下面字符串，用来指明源码是不可见的',\r\n    describes3: 'function Number() { [native code] }',\r\n    describes4: '对于 Number 对象的实例，toSource() 返回一个表示源码的字符串。',\r\n    describes5: '该方法通常被 JavaScript 内部调用，而不是在代码中显示调用。'\r\n  },\r\n  {\r\n    id: 4,\r\n    text:\r\n      'Number.isNaN() 方法确定传递的值是否为 NaN和其类型是 Number。它是原始的全局isNaN()的更强大的版本。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'Number.isNaN(value)',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isNaN',\r\n    relevant: 'isNaN()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes:\r\n      '在 JavaScript 中，NaN 最特殊的地方就是，我们不能使用相等运算符（== 和 ===）来判断一个值是否是 NaN，因为 NaN == NaN 和 NaN === NaN 都会返回 false。因此，必须要有一个判断值是否是 NaN 的方法。',\r\n    describes2:\r\n      '和全局函数 isNaN() 相比，该方法不会强制将参数转换成数字，只有在参数是真正的数字类型，且值为 NaN 的时候才会返回 true。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1: 'value',\r\n    parameter2: '要被检测是否是 NaN 的值',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '一个布尔值，表示给定的值是否是 NaN。'\r\n  },\r\n  {\r\n    id: 5,\r\n    text:\r\n      'Number.parseFloat() 方法可以把一个字符串解析成浮点数。该方法与全局的 parseFloat() 函数相同，并且处于 ECMAScript 6 规范中（用于全局变量的模块化）。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'Number.parseFloat(string)',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number',\r\n    relevant: 'Number',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes: '请移步全局函数 parseFloat() 页面查看更多的解释和示例。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1: 'value',\r\n    parameter2: '被解析的字符串。',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '给定值被解析成浮点数，如果无法被解析成浮点数，则返回NaN'\r\n  },\r\n  {\r\n    id: 6,\r\n    text:\r\n      'Number.parseInt() 方法依据指定基数 [ 参数 radix 的值]，把字符串 [ 参数 string 的值] 解析成整数。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'Number.parseInt(string[, radix])',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number',\r\n    relevant: 'Number',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes: '请移步全局函数 parseFloat() 页面查看更多的解释和示例。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1: 'string',\r\n    parameter2: 'radix',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '// radix为指定基数，即字符串以多少进制的数字表示',\r\n    retuval2: \"let strObj = '0110';\",\r\n    retuval3: 'console.log(Number.parseInt(strObj, 2)); // 6',\r\n    retuval4: 'console.log(Number.parseInt(strObj, 10)); // 110'\r\n  },\r\n  {\r\n    id: 7,\r\n    text: 'toLocaleString() 方法返回这个数字在特定语言环境下的表示字符串。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'numObj.toLocaleString([locales [, options]])',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toString',\r\n    relevant: 'Number.prototype.toString()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes: '请移步全局函数 parseFloat() 页面查看更多的解释和示例。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1: 'options可选. 包含一些或所有的下面属性的类:',\r\n    parameter2:\r\n      'style格式化时使用的样式.可能的值有“decimal”表示纯数字格式 , “currency”表示货币格式, 和\"percent\"表示百分比格式; 默认值是 \"decimal\".',\r\n    parameter3:\r\n      'localeMatcher使用的local的匹配算法. 可能的值有\"lookup\"和\"best fit\"; 默认值是 \"best fit\". ',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '返回一个语言环境下的表示字符串。',\r\n    //性能\r\n    performance: '性能',\r\n    performance:\r\n      '当格式化大量数字时，最好建立一个 NumberFormat 对象并且使用它提供的 NumberFormat.format 方法。'\r\n  },\r\n  {\r\n    id: 8,\r\n    text: 'toFixed() 方法使用定点表示法来格式化一个数值。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'numObj.toFixed(digits)',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toString',\r\n    relevant: 'Number.prototype.toString()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes: '请移步全局函数 parseFloat() 页面查看更多的解释和示例。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1:\r\n      'digits小数点后数字的个数；介于 0 到 20 （包括）之间，实现环境可能支持更大范围。如果忽略该参数，则默认为 0。',\r\n    //抛出异常\r\n    abnormal: '抛出异常',\r\n    abnormal1:\r\n      'RangeError如果 digits 参数太小或太大。0 到 20（包括）之间的值不会引起 RangeError。实现环境（implementations）也可以支持更大或更小的值。',\r\n    abnormal2: 'TypeError如果该方法在一个非Number类型的对象上调用。',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '使用定点表示法表示给定数字的字符串。'\r\n  }\r\n];\r\nconst num2 = [\r\n  {\r\n    id: 1,\r\n    title: '数字的方法',\r\n    chidlren: {\r\n      label: 'valueOf()',\r\n      label2: 'toString()',\r\n      label3: 'toSource()',\r\n      label4: 'isNaN()',\r\n      label5: 'parseFloat()',\r\n      label6: 'parseInt()',\r\n      label7: 'toLocaleString() ',\r\n      label8: 'toFixed()'\r\n    }\r\n  }\r\n];\r\n\r\n//对象的方法\r\nconst obj = [\r\n  {\r\n    id: 1,\r\n    text:\r\n      'Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'Object.assign(target, ...sources)',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties',\r\n    relevant: 'Object.defineProperties()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes:\r\n      '如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。后面的源对象的属性将类似地覆盖前面的源对象的属性。',\r\n    describes2:\r\n      'Object.assign 方法只会拷贝源对象自身的并且可枚举的属性到目标对象。该方法使用源对象的[[Get]]和目标对象的[[Set]]，所以它会调用相关 getter 和 setter。因此，它分配属性，而不仅仅是复制或定义新的属性。如果合并源包含getter，这可能使其不适合将新属性合并到原型中。为了将属性定义（包括其可枚举性）复制到原型，应使用Object.getOwnPropertyDescriptor()和Object.defineProperty() 。',\r\n    describes3: 'String类型和 Symbol 类型的属性都会被拷贝',\r\n    describes4:\r\n      '在出现错误的情况下，例如，如果属性不可写，会引发TypeError，如果在引发错误之前添加了任何属性，则可以更改target对象。',\r\n    describes5:\r\n      '注意，Object.assign 不会在那些source对象值为 null 或 undefined 的时候抛出错误。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1: 'target ：目标对象',\r\n    parameter2: 'sources ：源对象。',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '目标对象。'\r\n  },\r\n  {\r\n    id: 2,\r\n    text:\r\n      'hasOwnProperty() 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（也就是，是否有指定的键）。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'obj.hasOwnProperty(prop)',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain',\r\n    relevant: '继承与原型链',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes:\r\n      '所有继承了 Object 的对象都会继承到 hasOwnProperty 方法。这个方法可以用来检测一个对象是否含有特定的自身属性；和 in 运算符不同，该方法会忽略掉那些从原型链上继承到的属性。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1:\r\n      'prop：要检测的属性的 String 字符串形式表示的名称，或者 Symbol。',\r\n    parameter2: 'sources ：源对象。',\r\n    //备注\r\n    remarks: '备注',\r\n    remarks1:\r\n      '即使属性的值是 null 或 undefined，只要属性存在，hasOwnProperty 依旧会返回 true。',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '用来判断某个对象是否含有指定的属性的布尔值 Boolean。'\r\n  },\r\n  {\r\n    id: 3,\r\n    text:\r\n      'Object.defineProperties() 方法直接在一个对象上定义新的属性或修改现有属性，并返回该对象。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'Object.defineProperties(obj, props)',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties',\r\n    relevant: '属性的可枚举性和所有权',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes:\r\n      'Object.defineProperties本质上定义了obj 对象上props的可枚举属性相对应的所有属性。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1: 'obj：在其上定义或修改属性的对象。',\r\n    parameter2:\r\n      'props ：要定义其可枚举属性或修改的属性描述符的对象。对象中存在的属性描述符主要有两种：数据描述符和访问器描述符（更多详情，请参阅Object.defineProperty()）。描述符具有以下键：',\r\n    parameter3:\r\n      'configurable ：true 当且仅当该属性描述符的类型可以被改变并且该属性可以从对应对象中删除。默认为 false',\r\n    parameter4:\r\n      'get ：作为该属性的 getter 函数，如果没有 getter 则为undefined。函数返回值将被用作属性的值。默认为 undefined',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '传递给函数的对象。'\r\n  },\r\n  {\r\n    id: 4,\r\n    text: 'Object.fromEntries() 方法把键值对列表转换为一个对象。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'Object.fromEntries(iterable);',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries',\r\n    relevant: 'Object.entries()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes:\r\n      'Object.fromEntries() 方法接收一个键值对的列表参数，并返回一个带有这些键值对的新对象。这个迭代参数应该是一个能够实现@iterator方法的的对象，返回一个迭代器对象。它生成一个具有两个元素的类数组的对象，第一个元素是将用作属性键的值，第二个元素是与该属性键关联的值。',\r\n    describes2: 'Object.fromEntries() 是 Object.entries 的反转。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1: 'iterable',\r\n    parameter2:\r\n      '可迭代对象，类似 Array 、 Map 或者其它实现了可迭代协议的对象。',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '一个由该迭代对象条目提供对应属性的新对象。'\r\n  }\r\n];\r\nconst obj2 = [\r\n  {\r\n    id: 1,\r\n    title: '对象的方法',\r\n    chidlren: {\r\n      label: 'assign()',\r\n      label2: 'hasOwnProperty()',\r\n      label3: 'defineProperties()',\r\n      label4: 'fromEntries() '\r\n    }\r\n  }\r\n];\r\n//数组的方法\r\nconst arra = [\r\n  {\r\n    id: 1,\r\n    text:\r\n      ' concat() 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method:\r\n      'var new_array = old_array.concat(value1[, value2[, ...[, valueN]]])',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push',\r\n    relevant: 'push',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes:\r\n      'concat方法创建一个新的数组，它由被调用的对象中的元素组成，每个参数的顺序依次是该参数的元素（如果参数是数组）或参数本身（如果参数不是数组）。它不会递归到嵌套数组参数中。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1: '将数组和/或值连接成新数组。详情请参阅下文描述。',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '新的 Array 实例。'\r\n  },\r\n  {\r\n    id: 2,\r\n    text:\r\n      'pop()方法从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'arr.pop()',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push',\r\n    relevant: 'Array.prototype.push()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes: 'pop 方法从一个数组中删除并返回最后一个元素。',\r\n    describes2:\r\n      'pop 方法有意具有通用性。该方法和 call() 或 apply() 一起使用时，可应用在类似数组的对象上。pop方法根据 length属性来确定最后一个元素的位置。如果不包含length属性或length属性不能被转成一个数值，会将length置为0，并返回undefined。',\r\n    describes3: '如果你在一个空数组上调用 pop()，它返回  undefined。',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '从数组中删除的元素(当数组为空时返回undefined)。'\r\n  },\r\n  {\r\n    id: 3,\r\n    text: 'push() 方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'arr.push(element1, ..., elementN)',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift',\r\n    relevant: 'Array.prototype.unshift()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes: 'push方法将值追加到数组中。',\r\n    describes2:\r\n      'push 方法有意具有通用性。该方法和 call() 或 apply() 一起使用时，可应用在类似数组的对象上。push 方法根据 length 属性来决定从哪里开始插入给定的值。如果 length 不能被转成一个数值，则插入的元素索引为 0，包括 length 不存在时。当 length 不存在时，将会创建它。',\r\n    describes3:\r\n      '唯一的原生类数组（array-like）对象是 Strings，尽管如此，它们并不适用该方法，因为字符串是不可改变的。',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '当调用该方法时，新的 length 属性值将被返回。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1: 'elementN:被添加到数组末尾的元素'\r\n  },\r\n  {\r\n    id: 4,\r\n    text:\r\n      'unshift() 方法将一个或多个元素添加到数组的开头，并返回该数组的新长度(该方法修改原有数组)。',\r\n    //语法\r\n    grammar: '语法:',\r\n    method: 'arr.unshift(element1, ..., elementN)',\r\n    //相关链接\r\n    link:\r\n      'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift',\r\n    relevant: 'Array.prototype.unshift()',\r\n    Connect: '相关链接',\r\n    //描述\r\n    describe: '描述',\r\n    describes: 'unshift 方法会在调用它的类数组对象的开始位置插入给定的参数。',\r\n    describes2:\r\n      'unshift 特意被设计成具有通用性；这个方法能够通过 call 或 apply 方法作用于类数组对象上。不过对于没有 length 属性（代表从0开始的一系列连续的数字属性的最后一个）的对象，调用该方法可能没有任何意义',\r\n    describes3:\r\n      '注意, 如果传入多个参数，它们会被以块的形式插入到对象的开始位置，它们的顺序和被作为参数传入时的顺序一致。 于是，传入多个参数调用一次 unshift ，和传入一个参数调用多次 unshift (例如，循环调用)，它们将得到不同的结果',\r\n    //返回值\r\n    retuval: '返回值',\r\n    retuval1: '当一个对象调用该方法时，返回其 length 属性值。',\r\n    //参数\r\n    parameter: '参数',\r\n    parameter1: 'elementN ：要添加到数组开头的元素或多个元素。'\r\n  }\r\n];\r\nconst arra2 = [\r\n  {\r\n    id: 1,\r\n    title: '数组的方法',\r\n    chidlren: {\r\n      label: 'concat()',\r\n      label2: 'pop()',\r\n      label3: 'push()',\r\n      label4: 'unshift() '\r\n    }\r\n  }\r\n];\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      {/* 字符串的方法 */}\r\n      <div>\r\n        {data2.map((item, index) => {\r\n          return (\r\n            <Card key={item.id || index} title={item.title}>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label2}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label3}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label4}</p>\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n      <Collapse defaultActiveKey={['key']}>\r\n        {data.map((item, index) => {\r\n          return (\r\n            // 标题\r\n            <Panel header={<h1>{item.text}</h1>} key={item.id || index}>\r\n              {/* 语法 */}\r\n              <h2>{item.grammar}</h2>\r\n              <p>{item.method}</p>\r\n              <p>{item.method2}</p>\r\n              {/* 参数 */}\r\n              <h1>{item.parameter}</h1>\r\n              <p>{item.parameter1}</p>\r\n              <p>{item.parameter2}</p>\r\n              {/* 返回值 */}\r\n              <h1>{item.retuval}</h1>\r\n              <p>{item.retuval1}</p>\r\n              {/* 描述 */}\r\n              <h2>{item.describe}</h2>\r\n              <p>{item.describes}</p>\r\n              <p>{item.describes2}</p>\r\n              {/* 性能 */}\r\n              <h1>{item.performance}</h1>\r\n              <p>{item.performance1}</p>\r\n              {/* 例子 */}\r\n              <p>{item.example}</p>\r\n              <p>{item.example1}</p>\r\n              <p>{item.example2}</p>\r\n              {/* 相关链接 */}\r\n              <h2>{item.Connect}</h2>\r\n              {<a href={item.link}>{item.relevant}</a>}\r\n            </Panel>\r\n          );\r\n        })}\r\n      </Collapse>\r\n      {/* 数组的一些方法 */}\r\n      <div>\r\n        {num2.map((item, index) => {\r\n          return (\r\n            <Card key={item.id || index} title={item.title}>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label2}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label3}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label4}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label5}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label6}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label7}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label8}</p>\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n      <Collapse defaultActiveKey={['key']}>\r\n        {num.map((item, index) => {\r\n          return (\r\n            // 标题\r\n            <Panel header={<h1>{item.text}</h1>} key={item.id || index}>\r\n              {/* 语法 */}\r\n              <h2>{item.grammar}</h2>\r\n              <p>{item.method}</p>\r\n              <p>{item.method2}</p>\r\n              {/* 参数 */}\r\n              <h1>{item.parameter}</h1>\r\n              <p>{item.parameter1}</p>\r\n              <p>{item.parameter2}</p>\r\n              <p>{item.parameter3}</p>\r\n              {/* 返回值 */}\r\n              <h1>{item.retuval}</h1>\r\n              <p>{item.retuval1}</p>\r\n              <p>{item.retuval2}</p>\r\n              <p>{item.retuval3}</p>\r\n              <p>{item.retuval4}</p>\r\n              {/* 抛出异常 */}\r\n              <h1>{item.abnormal}</h1>\r\n              <p>{item.abnormal1}</p>\r\n              <p>{item.abnormal2}</p>\r\n              {/* 描述 */}\r\n              <h2>{item.describe}</h2>\r\n              <p>{item.describes}</p>\r\n              <p>{item.describes2}</p>\r\n              <p>{item.describes3}</p>\r\n              <p>{item.describes4}</p>\r\n              <p>{item.describes5}</p>\r\n              {/* 性能 */}\r\n              <h1>{item.performance}</h1>\r\n              <p>{item.performance1}</p>\r\n              {/* 例子 */}\r\n              <p>{item.example}</p>\r\n              <p>{item.example1}</p>\r\n              <p>{item.example2}</p>\r\n              {/* 相关链接 */}\r\n              <h2>{item.Connect}</h2>\r\n              {<a href={item.link}>{item.relevant}</a>}\r\n            </Panel>\r\n          );\r\n        })}\r\n      </Collapse>\r\n      {/* 对象的方法 */}\r\n      <div>\r\n        {obj2.map((item, index) => {\r\n          return (\r\n            <Card key={item.id || index} title={item.title}>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label2}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label3}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label4}</p>\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n      {/* 数组的方法 */}\r\n      <Collapse defaultActiveKey={['key']}>\r\n        {obj.map((item, index) => {\r\n          return (\r\n            // 标题\r\n            <Panel header={<h1>{item.text}</h1>} key={item.id || index}>\r\n              {/* 语法 */}\r\n              <h2>{item.grammar}</h2>\r\n              <p>{item.method}</p>\r\n              <p>{item.method2}</p>\r\n              {/* 参数 */}\r\n              <h1>{item.parameter}</h1>\r\n              <p>{item.parameter1}</p>\r\n              <p>{item.parameter2}</p>\r\n              <p>{item.parameter3}</p>\r\n              <p>{item.parameter4}</p>\r\n              {/* 返回值 */}\r\n              <h1>{item.retuval}</h1>\r\n              <p>{item.retuval1}</p>\r\n              <p>{item.retuval2}</p>\r\n              <p>{item.retuval3}</p>\r\n              <p>{item.retuval4}</p>\r\n              {/* 抛出异常 */}\r\n              <h1>{item.abnormal}</h1>\r\n              <p>{item.abnormal1}</p>\r\n              <p>{item.abnormal2}</p>\r\n              {/* 描述 */}\r\n              <h2>{item.describe}</h2>\r\n              <p>{item.describes}</p>\r\n              <p>{item.describes2}</p>\r\n              <p>{item.describes3}</p>\r\n              <p>{item.describes4}</p>\r\n              <p>{item.describes5}</p>\r\n              {/* 备注 */}\r\n              <h1>{item.remarks}</h1>\r\n              <p>{item.remarks1}</p>\r\n              {/* 性能 */}\r\n              <h1>{item.performance}</h1>\r\n              <p>{item.performance1}</p>\r\n              {/* 例子 */}\r\n              <p>{item.example}</p>\r\n              <p>{item.example1}</p>\r\n              <p>{item.example2}</p>\r\n              {/* 相关链接 */}\r\n              <h2>{item.Connect}</h2>\r\n              {<a href={item.link}>{item.relevant}</a>}\r\n            </Panel>\r\n          );\r\n        })}\r\n      </Collapse>\r\n      <div>\r\n        {arra2.map((item, index) => {\r\n          return (\r\n            <Card key={item.id || index} title={item.title}>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label2}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label3}</p>\r\n              <p className=\"zrb-string-summary\">{item.chidlren.label4}</p>\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n      <Collapse defaultActiveKey={['key']}>\r\n        {arra.map((item, index) => {\r\n          return (\r\n            // 标题\r\n            <Panel header={<h1>{item.text}</h1>} key={item.id || index}>\r\n              {/* 语法 */}\r\n              <h2>{item.grammar}</h2>\r\n              <p>{item.method}</p>\r\n              <p>{item.method2}</p>\r\n              {/* 参数 */}\r\n              <h1>{item.parameter}</h1>\r\n              <p>{item.parameter1}</p>\r\n              <p>{item.parameter2}</p>\r\n              <p>{item.parameter3}</p>\r\n              <p>{item.parameter4}</p>\r\n              {/* 返回值 */}\r\n              <h1>{item.retuval}</h1>\r\n              <p>{item.retuval1}</p>\r\n              <p>{item.retuval2}</p>\r\n              <p>{item.retuval3}</p>\r\n              <p>{item.retuval4}</p>\r\n              {/* 抛出异常 */}\r\n              <h1>{item.abnormal}</h1>\r\n              <p>{item.abnormal1}</p>\r\n              <p>{item.abnormal2}</p>\r\n              {/* 描述 */}\r\n              <h2>{item.describe}</h2>\r\n              <p>{item.describes}</p>\r\n              <p>{item.describes2}</p>\r\n              <p>{item.describes3}</p>\r\n              <p>{item.describes4}</p>\r\n              <p>{item.describes5}</p>\r\n              {/* 备注 */}\r\n              <h1>{item.remarks}</h1>\r\n              <p>{item.remarks1}</p>\r\n              {/* 性能 */}\r\n              <h1>{item.performance}</h1>\r\n              <p>{item.performance1}</p>\r\n              {/* 例子 */}\r\n              <p>{item.example}</p>\r\n              <p>{item.example1}</p>\r\n              <p>{item.example2}</p>\r\n              {/* 相关链接 */}\r\n              <h2>{item.Connect}</h2>\r\n              {<a href={item.link}>{item.relevant}</a>}\r\n            </Panel>\r\n          );\r\n        })}\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Table, Card } from 'antd';\r\nconst columns = [\r\n  {\r\n    title: '状态代码',\r\n    dataIndex: 'name',\r\n    render: text => (\r\n      <a href=\"https://www.cnblogs.com/hyunbar/p/10393887.html\">{text}</a>\r\n    )\r\n  },\r\n  {\r\n    title: '状态信息',\r\n    className: 'column-money',\r\n    dataIndex: 'money'\r\n  },\r\n  {\r\n    title: '含义',\r\n    dataIndex: 'address'\r\n  }\r\n];\r\n\r\nconst data = [\r\n  {\r\n    key: '1',\r\n    name: '100',\r\n    money: 'Continue',\r\n    address:\r\n      '初始的请求已经接受，客户应当继续发送请求的其余部分。（HTTP 1.1新）'\r\n  },\r\n  {\r\n    key: '2',\r\n    name: '101',\r\n    money: 'Switching Protocols',\r\n    address: '服务器将遵从客户的请求转换到另外一种协议（HTTP 1.1新）'\r\n  },\r\n  {\r\n    key: '3',\r\n    name: '200',\r\n    money: 'OK',\r\n    address: '一切正常，对GET和POST请求的应答文档跟在后面。'\r\n  },\r\n  {\r\n    key: '4',\r\n    name: '201',\r\n    money: 'Created',\r\n    address: '服务器已经创建了文档，Location头给出了它的URL。'\r\n  },\r\n  {\r\n    key: '5',\r\n    name: '202',\r\n    money: 'Accepted',\r\n    address: '已经接受请求，但处理尚未完成。'\r\n  },\r\n  {\r\n    key: '6',\r\n    name: '203',\r\n    money: 'Non-Authoritative Information',\r\n    address:\r\n      '文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝（HTTP 1.1新）。'\r\n  },\r\n  {\r\n    key: '7',\r\n    name: '204',\r\n    money: 'No Content',\r\n    address:\r\n      '没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。'\r\n  },\r\n  {\r\n    key: '8',\r\n    name: '205',\r\n    money: 'Reset Content',\r\n    address:\r\n      '没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容（HTTP 1.1新）。'\r\n  },\r\n  {\r\n    key: '9',\r\n    name: '206',\r\n    money: 'Partial Content\t',\r\n    address:\r\n      '客户发送了一个带有Range头的GET请求，服务器完成了它（HTTP 1.1新）。'\r\n  },\r\n  {\r\n    key: '10',\r\n    name: '300',\r\n    money: 'Multiple Choices',\r\n    address:\r\n      '客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明。'\r\n  },\r\n  {\r\n    key: '11',\r\n    name: '301',\r\n    money: 'Moved Permanently',\r\n    address:\r\n      '客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL。'\r\n  },\r\n  {\r\n    key: '12',\r\n    name: '302',\r\n    money: 'Found',\r\n    address:\r\n      '类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。注意，在HTTP1.0中对应的状态信息是“Moved Temporatily”。出现该状态代码时，浏览器能够自动访问新的URL，因此它是一个很有用的状态代码。注意这个状态代码有时候可以和301替换使用。例如，如果浏览器错误地请求http://host/~user（缺少了后面的斜杠），有的服务器 返回301，有的则返回302。严格地说，我们只能假定只有当原来的请求是GET时浏览器才会自动重定向。请参见307。'\r\n  },\r\n  {\r\n    key: '13',\r\n    name: '303',\r\n    money: 'See Other',\r\n    address:\r\n      '类似于301/302，不同之处在于，如果原来的请求是POST，Location头指定的重定向目标文档应该通过GET提取（HTTP 1.1新）。'\r\n  },\r\n  {\r\n    key: '14',\r\n    name: '304',\r\n    money: 'Not Modified',\r\n    address:\r\n      '客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告 诉客户，原来缓冲的文档还可以继续使用。'\r\n  },\r\n  {\r\n    key: '15',\r\n    name: '305',\r\n    money: 'Use Proxy',\r\n    address:\r\n      '客户请求的文档应该通过Location头所指明的代理服务器提取（HTTP 1.1新）。'\r\n  },\r\n  {\r\n    key: '16',\r\n    name: '307',\r\n    money: 'Temporary Redirect',\r\n    address:\r\n      '和302 （Found）相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是POST，即使它实际上只能在POST请求的应答是303时才能重定 向。由于这个原因，HTTP 1.1新增了307，以便更加清除地区分几个状态代码：当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307应答，则浏览器只 能跟随对GET请求的重定向。（HTTP 1.1新）'\r\n  },\r\n  {\r\n    key: '17',\r\n    name: '400',\r\n    money: 'Bad Request',\r\n    address: '请求出现语法错误。'\r\n  },\r\n  {\r\n    key: '18',\r\n    name: '401',\r\n    money: 'Unauthorized',\r\n    address:\r\n      '客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字/密码对话框，然后在填 写合适的Authorization头后再次发出请求。'\r\n  },\r\n  {\r\n    key: '19',\r\n    name: '403',\r\n    money: 'Forbidden',\r\n    address:\r\n      '资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致。'\r\n  },\r\n  {\r\n    key: '20',\r\n    name: '404',\r\n    money: 'Not Found',\r\n    address: '无法找到指定位置的资源。这也是一个常用的应答。'\r\n  },\r\n  {\r\n    key: '21',\r\n    name: '405',\r\n    money: 'Method Not Allowed',\r\n    address:\r\n      '请求方法（GET、POST、HEAD、DELETE、PUT、TRACE等）对指定的资源不适用。（HTTP 1.1新）'\r\n  },\r\n  {\r\n    key: '22',\r\n    name: '406',\r\n    money: 'Not Acceptable\t',\r\n    address:\r\n      '指定的资源已经找到，但它的MIME类型和客户在Accpet头中所指定的不兼容（HTTP 1.1新）。'\r\n  },\r\n  {\r\n    key: '23',\r\n    name: '407',\r\n    money: 'Proxy Authentication Required',\r\n    address: '类似于401，表示客户必须先经过代理服务器的授权。（HTTP 1.1新）'\r\n  },\r\n  {\r\n    key: '24',\r\n    name: '408',\r\n    money: 'Request Timeout',\r\n    address:\r\n      '在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求。（HTTP 1.1新）'\r\n  },\r\n  {\r\n    key: '25',\r\n    name: '409',\r\n    money: 'Conflict',\r\n    address:\r\n      '通常和PUT请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功。（HTTP 1.1新）'\r\n  },\r\n  {\r\n    key: '26',\r\n    name: '410',\r\n    money: 'Gone',\r\n    address:\r\n      '所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和404的不同在于，返回407表示文档永久地离开了指定的位置，而 404表示由于未知的原因文档不可用。（HTTP 1.1新）'\r\n  },\r\n  {\r\n    key: '27',\r\n    name: '411',\r\n    money: 'Length Required',\r\n    address:\r\n      '服务器不能处理请求，除非客户发送一个Content-Length头。（HTTP 1.1新）'\r\n  },\r\n  {\r\n    key: '28',\r\n    name: '412',\r\n    money: 'Precondition Failed',\r\n    address: '请求头中指定的一些前提条件失败（HTTP 1.1新）。'\r\n  },\r\n  {\r\n    key: '29',\r\n    name: '413',\r\n    money: 'Request Entity Too Large',\r\n    address:\r\n      '目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个Retry-After头（HTTP 1.1新）。'\r\n  },\r\n  {\r\n    key: '30',\r\n    name: '414',\r\n    money: 'Request URI Too Long',\r\n    address: 'URI太长（HTTP 1.1新）。'\r\n  },\r\n  {\r\n    key: '31',\r\n    name: '416',\r\n    money: 'Requested Range Not Satisfiable',\r\n    address: '服务器不能满足客户在请求中指定的Range头。（HTTP 1.1新）'\r\n  },\r\n  {\r\n    key: '32',\r\n    name: '500',\r\n    money: 'Internal Server Error',\r\n    address: '服务器遇到了意料不到的情况，不能完成客户的请求。'\r\n  },\r\n  {\r\n    key: '33',\r\n    name: '501',\r\n    money: 'Not Implemented',\r\n    address:\r\n      '服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的PUT请求。'\r\n  },\r\n  {\r\n    key: '34',\r\n    name: '502',\r\n    money: 'Bad Gateway',\r\n    address:\r\n      '服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答。'\r\n  },\r\n  {\r\n    key: '35',\r\n    name: '503',\r\n    money: 'Service Unavailable',\r\n    address:\r\n      '服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回503。服务器返回503时可以提供一个 Retry-After头。'\r\n  },\r\n  {\r\n    key: '36',\r\n    name: '504',\r\n    money: 'Gateway Timeout',\r\n    address:\r\n      '由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答。（HTTP 1.1新）'\r\n  },\r\n  {\r\n    key: '37',\r\n    name: '505',\r\n    money: 'HTTP Version Not Supported',\r\n    address: '服务器不支持请求中所指明的HTTP版本。（HTTP 1.1新）'\r\n  }\r\n];\r\n\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <Card title=\"跨域解决方案\" bordered={false} style={{ width: 300 }}>\r\n        <p>1、 通过jsonp跨域</p>\r\n        <p>2、 document.domain + iframe跨域</p>\r\n        <p>3、 location.hash + iframe</p>\r\n        <p>4、 window.name + iframe跨域</p>\r\n        <p>5、 postMessage跨域</p>\r\n        <p>6、 跨域资源共享（CORS）</p>\r\n        <p>7、 nginx代理跨域</p>\r\n        <p>8、 nodejs中间件代理跨域</p>\r\n        <p>9、 WebSocket协议跨域</p>\r\n      </Card>\r\n      <h1>HTTP状态码</h1>\r\n      <Table\r\n        className=\"ant-table-thead\"\r\n        columns={columns}\r\n        dataSource={data}\r\n        bordered\r\n        title={() => ''}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Card, Col, Row } from 'antd';\r\n\r\nconst dom = [\r\n  {\r\n    id:1,\r\n    text:'判断数据类型的4种方式',\r\nlabel:'Object.prototype.toString.call ',\r\nlabel1:'instanceof',\r\nlabel2:' typeof',\r\nlabel3:'constructor',\r\n  },\r\n  {\r\n    id:2,\r\n    text:'节点的属性',\r\nlabel:'1.document.createElement(); 元素',\r\nlabel1:'2.document.createTextNode(); 文本',\r\nlabel3:'3.document.createComment();  注释',\r\nlabel2:' 4.document.createDocumentFragment(); 文档碎片',\r\n  },\r\n  {\r\n    id:3,\r\n    text:'插入元素方法',\r\n    label:'1.appendChild 就像是push方法 任何元素都可以调用 ',\r\n    label1:'2.insertBefore(a,B)  在B之前插入a元素 (父级调用)',\r\n    label2:'3.parent.removerChild();  (父级调用)',\r\n    label3:'4.removerChild() 删除自身',\r\n  },\r\n  {\r\n    id:4,\r\n    text:'设置定时器//识别时间只识别一次',\r\nlabel:'setInterval   window (循环定时器) ',\r\nlabel1:'  setTimeout    window(定时器)它只执行一次',\r\n  },\r\n  {\r\n    id:5,\r\n    text:'清除定时器',\r\nlabel:'clearInerval()',\r\nlabel1:'clearTimeout()',\r\n  }\r\n]\r\nexport default () => {\r\n  return (\r\n    <div style={{ background: '#ECECEC', padding: '30px' }}>\r\n    <Row gutter={16}>\r\n     \r\n     {\r\n       dom.map((item,index)=>{\r\n         return (\r\n            <Col span={8}>\r\n        <Card title={item.text} bordered={false}>\r\n        <p>{item.label}</p>\r\n        <p>{item.label1}</p>\r\n        <p>{item.label2}</p>\r\n        <p>{item.label3}</p>\r\n        </Card>\r\n      </Col>\r\n         )\r\n       })\r\n     }\r\n    </Row>\r\n  </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Collapse, Card, List } from 'antd';\r\nconst { Panel } = Collapse;\r\n\r\nconst template = [\r\n  {\r\n    id: 1,\r\n    title:\r\n      '模板字面量 是允许嵌入表达式的字符串字面量。你可以使用多行字符串和字符串插值功能。它们在ES2015规范的先前版本中被称为“模板字符串”。',\r\n    describe: '描述',\r\n    describe1:\r\n      '模板字符串使用反引号 (` `) 来代替普通字符串中的用双引号和单引号。模板字符串可以包含特定语法（${expression}）的占位符。占位符中的表达式和周围的文本会一起传递给一个默认函数，该函数负责将所有的部分连接起来，如果一个模板字符串由表达式开头，则该字符串被称为带标签的模板字符串，该表达式通常是一个函数，它会在模板字符串处理后被调用，在输出最终结果前，你都可以通过该函数来对模板字符串进行操作处理。在模版字符串内使用反引号（`）时，需要在它前面加转义符（）。',\r\n    rows: '导读',\r\n    rows1:\r\n      '传统的字符串模板 ：在传统的Javascript中，如果我们对DOM进行操作，字符串模板通常采用加号( + )进行字符串拼接。',\r\n    rows2:\r\n      'ES6模板字符串 ：以反引号( ` )表示普通的字符串，也可以表示多行字符串，同时还可以插入变量（代替传统的加号拼接）。',\r\n    example: '例子',\r\n    example1: '传统字符串拼接：',\r\n    example1: `\r\n    <script>\r\n    let name = 'wrf';\r\n    let age = 18;\r\n    let str1 = '名字:'+name + ' ,今年'+age+'岁';\r\n    console.log(str1);\r\n    // let str2 = '名字:xxx, 今年:xx岁';\r\n    // console.log(str2);\r\n</script>\r\n    `\r\n  }\r\n];\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <Collapse defaultActiveKey={['key']}>\r\n        {template.map((item, index) => {\r\n          return (\r\n            <Panel header=\"模板字符串\" key={item.id || index}>\r\n              <p>{item.title}</p>\r\n              {/* 描述 */}\r\n              <h1>{item.describe}</h1>\r\n              <p>{item.describe1}</p>\r\n              {/* 导读 */}\r\n              <h1>{item.rows}</h1>\r\n              <p>{item.rows1}</p>\r\n              <p>{item.rows2}</p>\r\n              {/* 例子 */}\r\n              <h1>{item.example}</h1>\r\n              <p>{item.example1}</p>\r\n              {/* 图片 */}\r\n              <img\r\n                src=\"https://upload-images.jianshu.io/upload_images/15204173-83d57a9190ce0a46.png?imageMogr2/auto-orient/strip|imageView2/2/w/730/format/webp\"\r\n                alt=\"\"\r\n              />\r\n            </Panel>\r\n          );\r\n        })}\r\n      </Collapse>\r\n\r\n      {/* 数组的解构赋值 */}\r\n      <h2 style={{ margin: '16px 0' }}>数组的解构赋值</h2>\r\n      <List>\r\n        <p>基本用法</p>\r\n        <p>\r\n          ES6\r\n          允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。\r\n        </p>\r\n        <p>'以前，为变量赋值，只能直接指定值。</p>\r\n        <Card>\r\n          <p>let a = 1;</p>\r\n          <p>let b = 2;</p>\r\n          <p>let c = 3;</p>\r\n        </Card>\r\n\r\n        <p>ES6 允许写成下面这样。</p>\r\n        <Card>\r\n          <p>let [a, b, c] = [1, 2, 3];</p>\r\n        </Card>\r\n        <h2>默认值 </h2>\r\n        <p>解构赋值允许指定默认值。</p>\r\n        <Card>\r\n          <p>let [foo = true] = [];</p>\r\n          <p>foo // true</p>\r\n          <p>let [x, y = 'b'] = ['a']; // x='a', y='b'</p>\r\n          <p>let [x, y = 'b'] = ['a', undefined]; // x='a', y='b'</p>\r\n        </Card>\r\n        <p>\r\n          注意，ES6\r\n          内部使用严格相等运算符（===），判断一个位置是否有值。所以，只有当一个数组成员严格等于undefined，默认值才会生效。\r\n        </p>\r\n        <Card>\r\n          <p>let [x = 1] = [undefined];</p>\r\n          <p>x // 1</p>\r\n          <p>let [x = 1] = [null];</p>\r\n          <p>x // null</p>\r\n        </Card>\r\n        <p>\r\n          上面代码中，如果一个数组成员是null，默认值就不会生效，因为null不严格等于undefined。\r\n        </p>\r\n        <p>\r\n          如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。\r\n        </p>\r\n        <Card>\r\n          <p>\r\n            {`function f() {\r\n              console.log('aaa');\r\n            }`}\r\n          </p>\r\n          <p>let [x = f()] = [1];</p>\r\n        </Card>\r\n        <p>上面代码中，因为x能取到值，所以函数f根本不会执行。</p>\r\n      </List>\r\n      {/* 对象的解构赋值 */}\r\n      <h2 style={{ margin: '16px 0' }}>对象的解构赋值</h2>\r\n      <List>\r\n        <p>解构不仅可以用于数组，还可以用于对象。</p>\r\n        <Card>\r\n          <p>{`let { foo, bar } = { foo: 'aaa', bar: 'bbb' };`}</p>\r\n          <p>foo // \"aaa\"</p>\r\n          <p>bar // \"bbb\"</p>\r\n        </Card>\r\n        <p>\r\n          对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。\r\n        </p>\r\n        <Card>\r\n          <p>{`let { bar, foo } = { foo: 'aaa', bar: 'bbb' };`}</p>\r\n          <p>foo // \"aaa\"</p>\r\n          <p>bar // \"bbb\"</p>\r\n          <p>{`let { baz } = { foo: 'aaa', bar: 'bbb' };`}</p>\r\n          <p>baz // undefined</p>\r\n        </Card>\r\n        <h2>默认值 </h2>\r\n        <p>对象的解构也可以指定默认值</p>\r\n        <Card>\r\n          <p>{`var {(x = 3)} = {};`}</p>\r\n          <p>x // 3</p>\r\n          <p>{`var {x, y = 5} = {x: 1};`}</p>\r\n          <p>x // 1</p>\r\n          <p>y // 5</p>\r\n          <p>{`var {x: y = 3} = {};`}</p>\r\n          <p>y // 3</p>\r\n        </Card>\r\n        <p>默认值生效的条件是，对象的属性值严格等于undefined。</p>\r\n        <Card>\r\n          <p>{`var {x = 3} = {x: undefined};`}</p>\r\n          <p>x // 3</p>\r\n          <p>{`var {x = 3} = {x: null};`}</p>\r\n          <p>x // null</p>\r\n        </Card>\r\n        <p>\r\n          上面代码中，属性x等于null，因为null与undefined不严格相等，所以是个有效的赋值，导致默认值3不会生效。\r\n        </p>\r\n        <h2>注意点</h2>\r\n        <p>（1）如果要将一个已经声明的变量用于解构赋值，必须非常小心。</p>\r\n        <Card>\r\n          <p>// 错误的写法</p>\r\n          <p>{`{x} = {x: 1};`}</p>\r\n          <p>let x;</p>\r\n          <p>// SyntaxError: syntax error</p>\r\n        </Card>\r\n        <p>\r\n          {`上面代码的写法会报错，因为 JavaScript 引擎会将{x}\r\n          理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免\r\n          JavaScript 将其解释为代码块，才能解决这个问题。`}\r\n        </p>\r\n        <Card>\r\n          <p>// 正确的写法</p>\r\n          <p>let x;</p>\r\n          <p>{`({x} = {x: 1});`}</p>\r\n        </Card>\r\n        <p>\r\n          上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。关于圆括号与解构赋值的关系，参见下文。\r\n        </p>\r\n        <h3>\r\n          （2）解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。\r\n        </h3>\r\n        <Card>\r\n          <p>({} = [true, false]);</p>\r\n          <p>({} = 'abc');</p>\r\n          <p>({} = []);</p>\r\n        </Card>\r\n        <p>上面的表达式虽然毫无意义，但是语法是合法的，可以执行。</p>\r\n      </List>\r\n      {/* 字符串的解构赋值  */}\r\n      <h2 style={{ margin: '16px 0' }}>字符串的解构赋值 </h2>\r\n      <List>\r\n        <p>\r\n          字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。\r\n        </p>\r\n        <Card>\r\n          <p>const [a, b, c, d, e] = 'hello';</p>\r\n          <p>a // \"h\"</p>\r\n          <p>b // \"e\"</p>\r\n          <p>c // \"l\"</p>\r\n          <p>d // \"l\"</p>\r\n          <p>e // \"o\"</p>\r\n        </Card>\r\n        <p>类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值。</p>\r\n        <Card>\r\n          <p>{`let {length : len} = 'hello';`}</p>\r\n          <p>len // 5</p>\r\n        </Card>\r\n      </List>\r\n      {/* 数值和布尔值的解构赋值  */}\r\n      <h2 style={{ margin: '16px 0' }}>数值和布尔值的解构赋值 </h2>\r\n      <List>\r\n        <p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p>\r\n        <Card>\r\n          <p>{`let {toString: s} = 123;`}</p>\r\n          <p>s === Number.prototype.toString // true</p>\r\n          <p>{`let {toString: s} = true;`}</p>\r\n          <p>s === Boolean.prototype.toString // true</p>\r\n        </Card>\r\n        <p>\r\n          上面代码中，数值和布尔值的包装对象都有toString属性，因此变量s都能取到值。\r\n        </p>\r\n        <p>\r\n          解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。\r\n        </p>\r\n        <Card>\r\n          <p>{`let { prop: x } = undefined; // TypeError`}</p>\r\n          <p>{`let { prop: y } = null; // TypeError`}</p>\r\n        </Card>\r\n      </List>\r\n      {/* 函数参数的解构赋值  */}\r\n      <h2 style={{ margin: '16px 0' }}>函数参数的解构赋值 </h2>\r\n      <List>\r\n        <p>函数的参数也可以使用解构赋值。</p>\r\n        <Card>\r\n          <p>{`function add([x, y]){\r\n  return x + y;\r\n}`}</p>\r\n          <p>add([1, 2]); // 3</p>\r\n        </Card>\r\n        <p>\r\n          上面代码中，函数add的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量x和y。对于函数内部的代码来说，它们能感受到的参数就是x和y。\r\n        </p>\r\n        <p>下面是另一个例子。</p>\r\n        <Card>\r\n          <p>{`[[1, 2], [3, 4]].map(([a, b]) => a + b);`}</p>\r\n          <p>{`// [ 3, 7 ]`}</p>\r\n        </Card>\r\n        <p>函数参数的解构也可以使用默认值。</p>\r\n        <Card>\r\n          <p>{`function move({x = 0, y = 0} = {}) {return [x, y];}`}</p>\r\n          <p>{`move({x: 3, y: 8}); // [3, 8]`}</p>\r\n          <p>{`move({x: 3}); // [3, 0]`}</p>\r\n          <p>move({}); // [0, 0]</p>\r\n          <p>move(); // [0, 0]</p>\r\n          <p></p>\r\n          <p></p>\r\n        </Card>\r\n        <p>\r\n          上面代码中，函数move的参数是一个对象，通过对这个对象进行解构，得到变量x和y的值。如果解构失败，x和y等于默认值。\r\n        </p>\r\n        <h3>注意，下面的写法会得到不一样的结果。</h3>\r\n        <Card>\r\n          <p>{`function move({x, y} = { x: 0, y: 0 }) {\r\n  return [x, y];}`}</p>\r\n          <p>{`move({x: 3, y: 8}); // [3, 8]`}</p>\r\n          <p>{`move({x: 3}); // [3, undefined]`}</p>\r\n          <p>move({}); // [undefined, undefined]</p>\r\n          <p>move(); // [0, 0]</p>\r\n        </Card>\r\n        <p>\r\n          上面代码是为函数move的参数指定默认值，而不是为变量x和y指定默认值，所以会得到与前一种写法不同的结果。\r\n        </p>\r\n        <h3>undefined就会触发函数参数的默认值。</h3>\r\n        <Card>\r\n          <p>[1, undefined, 3].map((x = 'yes') => x);</p>\r\n          <p>// [ 1, 'yes', 3 ]</p>\r\n        </Card>\r\n      </List>\r\n      <List>\r\n        <h2 style={{ margin: '16px 0' }}>Promise 的含义</h2>\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { List, Card } from 'antd';\r\nconst data = [\r\n  'node_moudules 文件夹 -->放着我们项目的依赖',\r\n  'dependencies(依赖) devDependencies(开发依赖)',\r\n  '写代码的时候需要用，打包的时候不需要 npm install 其实就是走的依赖',\r\n  'scripts 脚本 npm run serve',\r\n  'name 项目名称, version:版本号'\r\n];\r\nconst data2 = [\r\n  '1./* webpackChunkName: \"about\" */ 可以给懒加载模块起名',\r\n  '2.import() 表示懒加载，es6的语法',\r\n  '3.路由懒加载的写法(跳转到当前路由才去加载组件)',\r\n  `() => import('./views/Home.vue')`,\r\n  '4.路由重定向 使用redirect'\r\n];\r\nconst data3 = [\r\n  '路由激活样式',\r\n  'router-link-exact-active',\r\n  'router-link-active ',\r\n  'router-link exact 属性 确切严格的匹配',\r\n  '<router-link to=' / ' exact>'\r\n];\r\nconst data4 = [\r\n  'async await 异步的终极解决方案',\r\n  'async 后面必须跟函数 表示函数路面有异步操作',\r\n  'await 后面通常跟promise(也可以跟普通值) 跟promise 表示promise的执-行结果'\r\n];\r\nconst data5 = [\r\n  '-hash 改变的方法',\r\n  'hashchange  函数',\r\n  `histroy  histroy.pushState({},null,'/a')`,\r\n  '改变url不刷新页面 改变的方法'\r\n];\r\nconst data6 = [\r\n  'router-link tag 属性 把a标签转化成其他标签',\r\n  '路由跳转的方式 router-link this.$router.push()',\r\n  `参数为params的跳转方式 1)直接拼接路径:to={ path: /detail/${`item.id`}} 只能通过path  `,\r\n  '2)直接写params参数 :to=\"{name:`detail`,params:{id:item.id}}\" 只能通过name',\r\n  '写parmas跳转的时候路由必须接受参数通过:/',\r\n  '用/:id 表示不固定但是必须有 多个/:id/:name',\r\n  'this.$route.params',\r\n  '参数为query的跳转方式',\r\n  ':to=\"{name:`detail`,query:{id:item.id}}\"',\r\n  ':to=\"{path:`/detail`,query:{id:item.id}}\"',\r\n  'query取值 this.$router.query',\r\n  '既可以用name也可以用path',\r\n  '用query的时候路由不在需要任何处理'\r\n];\r\nconst data7 = [\r\n  'object.defineProperty:给一个对象添加属性或者修改已有属性',\r\n  '语法：object.defineProperty(obj.attr,descriptor)',\r\n  `obj:要修改或者添加属性的对象`,\r\n  'attr：操作的属性',\r\n  'descriptor：描述符，配置项',\r\n  'value:属性值 默认值为undefined,不能和访问描述器写在一起',\r\n  'writable:属性是否可以修改，默认为false',\r\n  'enumerable:属性是否可以遍历，默认是false',\r\n  'configurable:属性是否可以被删除，默认是false'\r\n];\r\nconst data8 = [\r\n  '阻止默认事件 .prevent',\r\n  '阻止冒泡 .stop',\r\n  `按键修饰符 .enter 键码 .数字（13）`,\r\n  '执行一次事件 .once'\r\n];\r\nconst data9 = [\r\n  '1.params：',\r\n  '  home传一条数据给childOne',\r\n  '  params在router-link中的写法是一个对象，因为可能传很多参数',\r\n  '分了两种：',\r\n  ' 1.传参不暴露在地址栏中',\r\n  ' 2.传参暴露在地址栏中',\r\n  '2.query',\r\n  '3.router-view'\r\n];\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <h2 style={{ margin: '16px 0' }}>vue</h2>\r\n      <List\r\n        size=\"large\"\r\n        header={<div>package.json的作用</div>}\r\n        bordered\r\n        dataSource={data}\r\n        renderItem={item => <List.Item>{item}</List.Item>}\r\n      />\r\n      <List\r\n        size=\"large\"\r\n        header={<div>路由懒加载</div>}\r\n        bordered\r\n        dataSource={data2}\r\n        renderItem={item => <List.Item>{item}</List.Item>}\r\n      />\r\n      <List\r\n        size=\"large\"\r\n        header={<div>路由激活样式</div>}\r\n        bordered\r\n        dataSource={data3}\r\n        renderItem={item => <List.Item>{item}</List.Item>}\r\n      />\r\n      <List\r\n        size=\"large\"\r\n        header={<div>async await 异步的终极解决方案</div>}\r\n        bordered\r\n        dataSource={data4}\r\n        renderItem={item => <List.Item>{item}</List.Item>}\r\n      />\r\n      <List\r\n        size=\"large\"\r\n        header={<div>单页面应用原理（hash histroy）</div>}\r\n        bordered\r\n        dataSource={data5}\r\n        renderItem={item => <List.Item>{item}</List.Item>}\r\n      />\r\n      <List\r\n        size=\"large\"\r\n        header={<div>路由跳转</div>}\r\n        bordered\r\n        dataSource={data6}\r\n        renderItem={item => <List.Item>{item}</List.Item>}\r\n      />\r\n      <List\r\n        size=\"large\"\r\n        header={<div>双向数据绑定原理</div>}\r\n        bordered\r\n        dataSource={data7}\r\n        renderItem={item => <List.Item>{item}</List.Item>}\r\n      />\r\n      <List\r\n        size=\"large\"\r\n        header={<div>事件修饰符：</div>}\r\n        bordered\r\n        dataSource={data8}\r\n        renderItem={item => <List.Item>{item}</List.Item>}\r\n      />\r\n      <List\r\n        size=\"large\"\r\n        header={<div>父子路由传参有三种方法</div>}\r\n        bordered\r\n        dataSource={data9}\r\n        renderItem={item => <List.Item>{item}</List.Item>}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { List,Card } from 'antd';\r\nconst data = [\r\n  'Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。',\r\n  '所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。',\r\n  'Promise对象有以下两个特点。',\r\n  '（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。',\r\n  '（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。',\r\n  '注意，为了行文方便，本章后面的resolved统一只指fulfilled状态，不包含rejected状态。',\r\n  '有了Promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供统一的接口，使得控制异步操作更加容易。',\r\n  'Promise也有一些缺点。首先，无法取消Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。第三，当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。',\r\n  '如果某些事件不断地反复发生，一般来说，使用 Stream 模式是比部署Promise更好的选择。',\r\n  '基本用法',\r\n  'ES6 规定，Promise对象是一个构造函数，用来生成Promise实例',\r\n  '下面代码创造了一个Promise实例。',\r\n  ''\r\n];\r\n\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <List\r\n        size=\"large\"\r\n        header={<h2>Promise 的含义 </h2>}\r\n        bordered\r\n        dataSource={data}\r\n        renderItem={item => <List.Item>{item}</List.Item>}\r\n      >\r\n<Card>\r\n  <p>{`const promise = new Promise(function(resolve, reject) {`}</p>\r\n      <p> // ... some code</p>\r\n      <p>{`if (/* 异步操作成功 */){`}</p>\r\n      <p>resolve(value);</p>\r\n      <p>{`  } else {`}</p>\r\n      <p>reject(error);</p>\r\n      <p> }</p>\r\n      <p>});</p>\r\n    </Card>\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from 'react';\r\n//登陆注册组件\r\nimport Login from './login';\r\nimport Register from './register';\r\n\r\n//相关笔记页面\r\nimport Home from '../note/home';\r\nimport Summary from '../note/summary';\r\nimport Knowledge from '../note/knowledge';\r\nimport Jssenior from '../note/Js-senior';\r\nimport Es6grammar from '../note/Es6grammar';\r\nimport Vueframe from '../note/Vueframe';\r\nimport Pramise from '../note/pramise';\r\n\r\nexport default class Index extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isCom: window.location.hash.slice(1) || 'Register'\r\n    };\r\n\r\n    window.onhashchange = () => {\r\n      this.setState({\r\n        isCom: window.location.hash.slice(1)\r\n      });\r\n    };\r\n  }\r\n  onchange = label => {\r\n    window.location.hash = label;\r\n    this.setState({\r\n      isCom: label\r\n    });\r\n  };\r\n  //返回的页面数据\r\n  getdata = data => {\r\n    window.location.hash = data;\r\n  };\r\n  render() {\r\n    let Dom = '';\r\n    switch (this.state.isCom) {\r\n      case 'Register':\r\n        Dom = <Register getdata={this.getdata} />;\r\n        break;\r\n      case 'Login':\r\n        Dom = <Login getdata={this.getdata} />;\r\n        break;\r\n      case 'Summary':\r\n        Dom = <Summary />;\r\n        break;\r\n      case 'Knowledge':\r\n        Dom = <Knowledge />;\r\n        break;\r\n      case 'Jssenior':\r\n        Dom = <Jssenior />;\r\n        break;\r\n      case 'Es6grammar':\r\n        Dom = <Es6grammar />;\r\n        break;\r\n      case 'Vueframe':\r\n        Dom = <Vueframe />;\r\n        break;\r\n      case 'Pramise':\r\n        Dom = <Pramise />;\r\n        break;\r\n    }\r\n    return (\r\n      <div>\r\n        {this.state.isCom == 'Register' ? (\r\n          <Register getdata={this.getdata} />\r\n        ) : this.state.isCom == 'Login' ? (\r\n          <Login getdata={this.getdata} />\r\n        ) : (\r\n          <Home getdata={this.getdata} onchange={this.onchange}>{Dom}</Home>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './astes/index.css';\nimport App from './login/';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}